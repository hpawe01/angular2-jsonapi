{"version":3,"file":"angular2-jsonapi.js","sources":["ng://angular2-jsonapi/models/json-nested.model.ts","ng://angular2-jsonapi/converters/json-model/json-model.converter.ts","ng://angular2-jsonapi/decorators/has-many.decorator.ts","ng://angular2-jsonapi/decorators/belongs-to.decorator.ts","ng://angular2-jsonapi/constants/symbols.ts","ng://angular2-jsonapi/converters/date/date.converter.ts","ng://angular2-jsonapi/decorators/attribute.decorator.ts","ng://angular2-jsonapi/decorators/nested-attribute.decorator.ts","ng://angular2-jsonapi/decorators/json-attribute.decorator.ts","ng://angular2-jsonapi/models/json-api-meta.model.ts","ng://angular2-jsonapi/decorators/json-api-model-config.decorator.ts","ng://angular2-jsonapi/decorators/json-api-datastore-config.decorator.ts","ng://angular2-jsonapi/models/json-api.model.ts","ng://angular2-jsonapi/models/error-response.model.ts","ng://angular2-jsonapi/models/json-api-query-data.ts","ng://angular2-jsonapi/interfaces/overrides.interface.ts","ng://angular2-jsonapi/interfaces/json-model-converter-config.interface.ts","ng://angular2-jsonapi/interfaces/datastore-config.interface.ts","ng://angular2-jsonapi/interfaces/model-config.interface.ts","ng://angular2-jsonapi/interfaces/attribute-decorator-options.interface.ts","ng://angular2-jsonapi/interfaces/property-converter.interface.ts","ng://angular2-jsonapi/services/json-api-datastore.service.ts","ng://angular2-jsonapi/providers.ts","ng://angular2-jsonapi/module.ts"],"sourcesContent":["import { ModelConfig } from '../interfaces/model-config.interface';\r\nimport { JsonApiModel } from './json-api.model';\r\n\r\nexport class JsonApiNestedModel {\r\n  [key: string]: any;\r\n\r\n  public nestedDataSerialization = false;\r\n\r\n  constructor(data?: any) {\r\n    if (data) {\r\n      Object.assign(this, data);\r\n    }\r\n  }\r\n\r\n  get modelConfig(): ModelConfig {\r\n    return Reflect.getMetadata('JsonApiModelConfig', this.constructor);\r\n  }\r\n\r\n  public fill(data: any) {\r\n    Object.assign(this, data);\r\n  }\r\n\r\n  public serialize(): any {\r\n    return this.transformSerializedNamesToPropertyNames();\r\n  }\r\n\r\n  protected transformSerializedNamesToPropertyNames<T extends JsonApiModel>() {\r\n    const serializedNameToPropertyName = this.getModelPropertyNames();\r\n    const properties: any = {};\r\n    Object.keys(serializedNameToPropertyName).forEach((serializedName) => {\r\n      if (this && this[serializedName] !== null &&\r\n        this[serializedName] !== undefined && serializedName !== 'nestedDataSerialization') {\r\n        properties[serializedNameToPropertyName[serializedName]] = this[serializedName];\r\n      }\r\n    });\r\n\r\n    return properties;\r\n  }\r\n\r\n  protected getModelPropertyNames() {\r\n    return Reflect.getMetadata('AttributeMapping', this) || [];\r\n  }\r\n}\r\n","import { JsonModelConverterConfig } from '../../interfaces/json-model-converter-config.interface';\r\nimport { PropertyConverter } from '../../interfaces/property-converter.interface';\r\nimport { JsonApiNestedModel } from '../../models/json-nested.model';\r\n\r\nexport const DEFAULT_OPTIONS: JsonModelConverterConfig = {\r\n  nullValue: false,\r\n  hasMany: false\r\n};\r\n\r\nexport class JsonModelConverter<T> implements PropertyConverter {\r\n  private modelType: any; // ModelType<T>\r\n  private options: JsonModelConverterConfig;\r\n\r\n  constructor(model: T, options: JsonModelConverterConfig = {}) {\r\n    this.modelType = model; // <ModelType<T>>model\r\n    this.options = {...DEFAULT_OPTIONS, ...options};\r\n  }\r\n\r\n  mask(value: any): T | Array<T> {\r\n    if (!value && !this.options.nullValue) {\r\n      if (this.options.hasMany) {\r\n        return [];\r\n      }\r\n      return new this.modelType();\r\n    }\r\n\r\n    let result = null;\r\n    if (this.options.hasMany) {\r\n      if (!Array.isArray(value)) {\r\n        throw new Error(`ERROR: JsonModelConverter: Expected array but got ${typeof value}.`);\r\n      }\r\n      result = [];\r\n      for (const item of value) {\r\n        if (item === null) {\r\n          continue;\r\n        }\r\n        let temp;\r\n        if (typeof item === 'object') {\r\n          temp = new this.modelType();\r\n          temp.fill(item);\r\n        } else {\r\n          temp = item;\r\n        }\r\n\r\n        result.push(temp);\r\n      }\r\n    } else {\r\n      if (!(value instanceof this.modelType)) {\r\n        result = new this.modelType();\r\n        result.fill(value);\r\n      } else {\r\n        result = value;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  unmask(value: any): any {\r\n    if (!value) {\r\n      return value;\r\n    }\r\n    let result = null;\r\n    if (Array.isArray(value)) {\r\n      result = [];\r\n      for (const item of value) {\r\n        if (!item) {\r\n          continue;\r\n        }\r\n        if (item instanceof JsonApiNestedModel) {\r\n          item.nestedDataSerialization = true;\r\n          result.push(item.serialize());\r\n          item.nestedDataSerialization = false;\r\n        } else {\r\n          result.push(item);\r\n        }\r\n      }\r\n    } else {\r\n      if (value instanceof JsonApiNestedModel) {\r\n        value.nestedDataSerialization = true;\r\n        result = value.serialize();\r\n        value.nestedDataSerialization = false;\r\n      } else {\r\n        result = value;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n}\r\n","export function HasMany(config: any = {}) {\r\n  return (target: any, propertyName: string | symbol) => {\r\n    const annotations = Reflect.getMetadata('HasMany', target) || [];\r\n\r\n    annotations.push({\r\n      propertyName,\r\n      relationship: config.key || propertyName\r\n    });\r\n\r\n    Reflect.defineMetadata('HasMany', annotations, target);\r\n  };\r\n}\r\n","export function BelongsTo(config: any = {}) {\r\n  return (target: any, propertyName: string | symbol) => {\r\n    const annotations = Reflect.getMetadata('BelongsTo', target) || [];\r\n\r\n    annotations.push({\r\n      propertyName,\r\n      relationship: config.key || propertyName\r\n    });\r\n\r\n    Reflect.defineMetadata('BelongsTo', annotations, target);\r\n  };\r\n}\r\n","// tslint:disable-next-line:variable-name\r\nexport const AttributeMetadata = Symbol('AttributeMetadata') as any;\r\n","import { parseISO } from 'date-fns';\r\nimport { PropertyConverter } from '../../interfaces/property-converter.interface';\r\n\r\nexport class DateConverter implements PropertyConverter {\r\n  mask(value: any) {\r\n    if (typeof value === 'string') {\r\n      return parseISO(value);\r\n    } else {\r\n      return value;\r\n    }\r\n  }\r\n\r\n  unmask(value: any) {\r\n    if (value === null) {\r\n      return null;\r\n    }\r\n    return value.toISOString();\r\n  }\r\n}\r\n","import { AttributeMetadata } from '../constants/symbols';\r\nimport { AttributeDecoratorOptions } from '../interfaces/attribute-decorator-options.interface';\r\nimport { DateConverter } from '../converters/date/date.converter';\r\nimport * as _ from 'lodash';\r\n\r\nexport function Attribute(options: AttributeDecoratorOptions = {}): PropertyDecorator {\r\n  return (target: any, propertyName: string) => {\r\n    const converter = (dataType: any, value: any, forSerialisation = false): any => {\r\n      let attrConverter;\r\n\r\n      if (options.converter) {\r\n        attrConverter = options.converter;\r\n      } else if (dataType === Date) {\r\n        attrConverter = new DateConverter();\r\n      } else {\r\n        const datatype = new dataType();\r\n\r\n        if (datatype.mask && datatype.unmask) {\r\n          attrConverter = datatype;\r\n        }\r\n      }\r\n\r\n      if (attrConverter) {\r\n        if (!forSerialisation) {\r\n          return attrConverter.mask(value);\r\n        }\r\n        return attrConverter.unmask(value);\r\n      }\r\n\r\n      return value;\r\n    };\r\n\r\n    const saveAnnotations = () => {\r\n      const metadata = Reflect.getMetadata('Attribute', target) || {};\r\n\r\n      metadata[propertyName] = {\r\n        marked: true\r\n      };\r\n\r\n      Reflect.defineMetadata('Attribute', metadata, target);\r\n\r\n      const mappingMetadata = Reflect.getMetadata('AttributeMapping', target) || {};\r\n      const serializedPropertyName = options.serializedName !== undefined ? options.serializedName : propertyName;\r\n      mappingMetadata[serializedPropertyName] = propertyName;\r\n      Reflect.defineMetadata('AttributeMapping', mappingMetadata, target);\r\n    };\r\n\r\n    const setMetadata = (\r\n      instance: any,\r\n      oldValue: any,\r\n      newValue: any\r\n    ) => {\r\n      const targetType = Reflect.getMetadata('design:type', target, propertyName);\r\n\r\n      if (!instance[AttributeMetadata]) {\r\n        instance[AttributeMetadata] = {};\r\n      }\r\n      instance[AttributeMetadata][propertyName] = {\r\n        newValue,\r\n        oldValue,\r\n        nested: false,\r\n        serializedName: options.serializedName,\r\n        hasDirtyAttributes: !_.isEqual(oldValue, newValue),\r\n        serialisationValue: converter(targetType, newValue, true)\r\n      };\r\n    };\r\n\r\n    const getter = function() {\r\n      return this[`_${propertyName}`];\r\n    };\r\n\r\n    const setter = function(newVal: any) {\r\n      const targetType = Reflect.getMetadata('design:type', target, propertyName);\r\n      const convertedValue = converter(targetType, newVal);\r\n      let oldValue = null;\r\n      if (this.isModelInitialization() && this.id) {\r\n        oldValue = converter(targetType, newVal);\r\n      } else {\r\n        if (this[AttributeMetadata] && this[AttributeMetadata][propertyName]) {\r\n          oldValue = this[AttributeMetadata][propertyName].oldValue;\r\n        }\r\n      }\r\n\r\n      this[`_${propertyName}`] = convertedValue;\r\n      setMetadata(this, oldValue, convertedValue);\r\n    };\r\n\r\n    if (delete target[propertyName]) {\r\n      saveAnnotations();\r\n      Object.defineProperty(target, propertyName, {\r\n        get: getter,\r\n        set: setter,\r\n        enumerable: true,\r\n        configurable: true\r\n      });\r\n    }\r\n  };\r\n}\r\n","import { AttributeMetadata } from '../constants/symbols';\r\nimport { AttributeDecoratorOptions } from '../interfaces/attribute-decorator-options.interface';\r\nimport * as _ from 'lodash';\r\n\r\nexport function NestedAttribute(options: AttributeDecoratorOptions = {}): PropertyDecorator {\r\n  return (target: any, propertyName: string) => {\r\n    const converter = (dataType: any, value: any, forSerialisation = false): any => {\r\n      let attrConverter;\r\n\r\n      if (options.converter) {\r\n        attrConverter = options.converter;\r\n      } else {\r\n        const datatype = new dataType();\r\n\r\n        if (datatype.mask && datatype.unmask) {\r\n          attrConverter = datatype;\r\n        }\r\n      }\r\n\r\n      if (attrConverter) {\r\n        if (!forSerialisation) {\r\n          return attrConverter.mask(value);\r\n        }\r\n        return attrConverter.unmask(value);\r\n      }\r\n\r\n      return value;\r\n    };\r\n\r\n    const saveAnnotations = () => {\r\n      const metadata = Reflect.getMetadata('NestedAttribute', target) || {};\r\n\r\n      metadata[propertyName] = {\r\n        marked: true\r\n      };\r\n\r\n      Reflect.defineMetadata('NestedAttribute', metadata, target);\r\n\r\n      const mappingMetadata = Reflect.getMetadata('AttributeMapping', target) || {};\r\n      const serializedPropertyName = options.serializedName !== undefined ? options.serializedName : propertyName;\r\n      mappingMetadata[serializedPropertyName] = propertyName;\r\n      Reflect.defineMetadata('AttributeMapping', mappingMetadata, target);\r\n    };\r\n\r\n    const updateMetadata = (instance: any) => {\r\n      const newValue = instance[`_${propertyName}`];\r\n\r\n      if (!instance[AttributeMetadata]) {\r\n        instance[AttributeMetadata] = {};\r\n      }\r\n      if (instance[AttributeMetadata][propertyName] && !instance.isModelInitialization()) {\r\n        instance[AttributeMetadata][propertyName].newValue = newValue;\r\n        instance[AttributeMetadata][propertyName].hasDirtyAttributes = !_.isEqual(\r\n          instance[AttributeMetadata][propertyName].oldValue,\r\n          newValue\r\n        );\r\n        instance[AttributeMetadata][propertyName].serialisationValue = newValue;\r\n      } else {\r\n        const oldValue = _.cloneDeep(newValue);\r\n        instance[AttributeMetadata][propertyName] = {\r\n          newValue,\r\n          oldValue,\r\n          converter,\r\n          nested: true,\r\n          hasDirtyAttributes: !_.isEqual(newValue, oldValue)\r\n        };\r\n      }\r\n    };\r\n\r\n    const getter = function() {\r\n      return this[`_${propertyName}`];\r\n    };\r\n\r\n    const setter = function(newVal: any) {\r\n      const targetType = Reflect.getMetadata('design:type', target, propertyName);\r\n      this[`_${propertyName}`] = converter(targetType, newVal);\r\n      updateMetadata(this);\r\n    };\r\n\r\n    if (delete target[propertyName]) {\r\n      saveAnnotations();\r\n      Object.defineProperty(target, propertyName, {\r\n        get: getter,\r\n        set: setter,\r\n        enumerable: true,\r\n        configurable: true\r\n      });\r\n\r\n    }\r\n  };\r\n}\r\n","import { AttributeDecoratorOptions } from '../interfaces/attribute-decorator-options.interface';\r\nimport { DateConverter } from '../converters/date/date.converter';\r\n\r\nexport function JsonAttribute(options: AttributeDecoratorOptions = {}): PropertyDecorator {\r\n  return (target: any, propertyName: string) => {\r\n    const converter = (dataType: any, value: any, forSerialisation = false): any => {\r\n      let attrConverter;\r\n\r\n      if (options.converter) {\r\n        attrConverter = options.converter;\r\n      } else if (dataType === Date) {\r\n        attrConverter = new DateConverter();\r\n      } else {\r\n        const datatype = new dataType();\r\n\r\n        if (datatype.mask && datatype.unmask) {\r\n          attrConverter = datatype;\r\n        }\r\n      }\r\n\r\n      if (attrConverter) {\r\n        if (!forSerialisation) {\r\n          return attrConverter.mask(value);\r\n        }\r\n        return attrConverter.unmask(value);\r\n      }\r\n\r\n      return value;\r\n    };\r\n\r\n    const saveAnnotations = () => {\r\n      const metadata = Reflect.getMetadata('JsonAttribute', target) || {};\r\n\r\n      metadata[propertyName] = {\r\n        marked: true\r\n      };\r\n\r\n      Reflect.defineMetadata('JsonAttribute', metadata, target);\r\n\r\n      const mappingMetadata = Reflect.getMetadata('AttributeMapping', target) || {};\r\n      const serializedPropertyName = options.serializedName !== undefined ? options.serializedName : propertyName;\r\n      mappingMetadata[serializedPropertyName] = propertyName;\r\n      Reflect.defineMetadata('AttributeMapping', mappingMetadata, target);\r\n    };\r\n\r\n    const getter = function() {\r\n      if (this.nestedDataSerialization) {\r\n        return converter(Reflect.getMetadata('design:type', target, propertyName), this[`_${propertyName}`], true);\r\n      }\r\n      return this[`_${propertyName}`];\r\n    };\r\n\r\n    const setter = function(newVal: any) {\r\n      const targetType = Reflect.getMetadata('design:type', target, propertyName);\r\n      this[`_${propertyName}`] = converter(targetType, newVal);\r\n    };\r\n\r\n    if (delete target[propertyName]) {\r\n      saveAnnotations();\r\n      Object.defineProperty(target, propertyName, {\r\n        get: getter,\r\n        set: setter,\r\n        enumerable: true,\r\n        configurable: true\r\n      });\r\n    }\r\n  };\r\n}\r\n","export type MetaModelType<T> = new(response: any) => T;\r\n\r\nexport class JsonApiMetaModel {\r\n  public links: Array<any>;\r\n  public meta: any;\r\n\r\n  constructor(response: any) {\r\n    this.links = response.links || [];\r\n    this.meta = response.meta;\r\n  }\r\n}\r\n","import { JsonApiMetaModel } from '../models/json-api-meta.model';\r\nimport { ModelConfig } from '../interfaces/model-config.interface';\r\n\r\nexport function JsonApiModelConfig(config: ModelConfig) {\r\n  return (target: any) => {\r\n    if (typeof config.meta === 'undefined' || config.meta == null) {\r\n      config.meta = JsonApiMetaModel;\r\n    }\r\n\r\n    Reflect.defineMetadata('JsonApiModelConfig', config, target);\r\n  };\r\n}\r\n","export function JsonApiDatastoreConfig(config: any = {}) {\r\n  return (target: any) => {\r\n    Reflect.defineMetadata('JsonApiDatastoreConfig', config, target);\r\n  };\r\n}\r\n","import find from 'lodash-es/find';\r\nimport includes from 'lodash-es/includes';\r\nimport { Observable } from 'rxjs';\r\nimport { JsonApiDatastore, ModelType } from '../services/json-api-datastore.service';\r\nimport { ModelConfig } from '../interfaces/model-config.interface';\r\nimport * as _ from 'lodash';\r\nimport { AttributeMetadata } from '../constants/symbols';\r\nimport { HttpHeaders } from '@angular/common/http';\r\n\r\n/**\r\n * HACK/FIXME:\r\n * Type 'symbol' cannot be used as an index type.\r\n * TypeScript 2.9.x\r\n * See https://github.com/Microsoft/TypeScript/issues/24587.\r\n */\r\n// tslint:disable-next-line:variable-name\r\nconst AttributeMetadataIndex: string = AttributeMetadata as any;\r\n\r\nexport class JsonApiModel {\r\n  id: string;\r\n  public modelInitialization = false;\r\n\r\n  [key: string]: any;\r\n\r\n  lastSyncModels: Array<any>;\r\n\r\n  constructor(private internalDatastore: JsonApiDatastore, data?: any) {\r\n    if (data) {\r\n      this.modelInitialization = true;\r\n      this.id = data.id;\r\n      Object.assign(this, data.attributes);\r\n      this.modelInitialization = false;\r\n    }\r\n  }\r\n\r\n  public isModelInitialization(): boolean {\r\n    return this.modelInitialization;\r\n  }\r\n\r\n  public syncRelationships(data: any, included: any, remainingModels?: Array<any>): void {\r\n    if (this.lastSyncModels === included) {\r\n      return;\r\n    }\r\n\r\n    if (data) {\r\n      let modelsForProcessing = remainingModels;\r\n\r\n      if (modelsForProcessing === undefined) {\r\n        modelsForProcessing = [].concat(included);\r\n      }\r\n\r\n      this.parseHasMany(data, included, modelsForProcessing);\r\n      this.parseBelongsTo(data, included, modelsForProcessing);\r\n    }\r\n\r\n    this.lastSyncModels = included;\r\n  }\r\n\r\n  public save(params?: any, headers?: HttpHeaders, customUrl?: string): Observable<this> {\r\n    this.checkChanges();\r\n    const attributesMetadata: any = this[AttributeMetadataIndex];\r\n    return this.internalDatastore.saveRecord(attributesMetadata, this, params, headers, customUrl);\r\n  }\r\n\r\n  get hasDirtyAttributes() {\r\n    this.checkChanges();\r\n    const attributesMetadata: any = this[AttributeMetadataIndex];\r\n    let hasDirtyAttributes = false;\r\n    for (const propertyName in attributesMetadata) {\r\n      if (attributesMetadata.hasOwnProperty(propertyName)) {\r\n        const metadata: any = attributesMetadata[propertyName];\r\n        if (metadata.hasDirtyAttributes) {\r\n          hasDirtyAttributes = true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return hasDirtyAttributes;\r\n  }\r\n\r\n  private checkChanges() {\r\n    const attributesMetadata: any = this[AttributeMetadata];\r\n    for (const propertyName in attributesMetadata) {\r\n      if (attributesMetadata.hasOwnProperty(propertyName)) {\r\n        const metadata: any = attributesMetadata[propertyName];\r\n        if (metadata.nested) {\r\n          this[AttributeMetadata][propertyName].hasDirtyAttributes = !_.isEqual(\r\n            attributesMetadata[propertyName].oldValue,\r\n            attributesMetadata[propertyName].newValue\r\n          );\r\n          this[AttributeMetadata][propertyName].serialisationValue = attributesMetadata[propertyName].converter(\r\n            Reflect.getMetadata('design:type', this, propertyName),\r\n            _.cloneDeep(attributesMetadata[propertyName].newValue),\r\n            true\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public rollbackAttributes(): void {\r\n    const attributesMetadata: any = this[AttributeMetadataIndex];\r\n    for (const propertyName in attributesMetadata) {\r\n      if (attributesMetadata.hasOwnProperty(propertyName)) {\r\n        if (attributesMetadata[propertyName].hasDirtyAttributes) {\r\n          this[propertyName] = _.cloneDeep(attributesMetadata[propertyName].oldValue);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  get modelConfig(): ModelConfig {\r\n    return Reflect.getMetadata('JsonApiModelConfig', this.constructor);\r\n  }\r\n\r\n  private parseHasMany(data: any, included: any, remainingModels: Array<any>): void {\r\n    const hasMany: any = Reflect.getMetadata('HasMany', this);\r\n\r\n    if (hasMany) {\r\n      for (const metadata of hasMany) {\r\n        const relationship: any = data.relationships ? data.relationships[metadata.relationship] : null;\r\n\r\n        if (relationship && relationship.data && Array.isArray(relationship.data)) {\r\n          let allModels: JsonApiModel[] = [];\r\n          const modelTypesFetched: any = [];\r\n\r\n          for (const typeIndex of Object.keys(relationship.data)) {\r\n            const typeName: string = relationship.data[typeIndex].type;\r\n\r\n            if (!includes(modelTypesFetched, typeName)) {\r\n              modelTypesFetched.push(typeName);\r\n              // tslint:disable-next-line:max-line-length\r\n              const modelType: ModelType<this> = Reflect.getMetadata('JsonApiDatastoreConfig', this.internalDatastore.constructor).models[typeName];\r\n\r\n              if (modelType) {\r\n                const relationshipModels: JsonApiModel[] = this.getHasManyRelationship(\r\n                  modelType,\r\n                  relationship.data,\r\n                  included,\r\n                  typeName,\r\n                  remainingModels\r\n                );\r\n\r\n                if (relationshipModels.length > 0) {\r\n                  allModels = allModels.concat(relationshipModels);\r\n                }\r\n              } else {\r\n                throw {message: `parseHasMany - Model type for relationship ${typeName} not found.`};\r\n              }\r\n            }\r\n          }\r\n\r\n          this[metadata.propertyName] = allModels;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private parseBelongsTo(data: any, included: Array<any>, remainingModels: Array<any>): void {\r\n    const belongsTo: any = Reflect.getMetadata('BelongsTo', this);\r\n\r\n    if (belongsTo) {\r\n      for (const metadata of belongsTo) {\r\n        const relationship: any = data.relationships ? data.relationships[metadata.relationship] : null;\r\n        if (relationship && relationship.data) {\r\n          const dataRelationship: any = (relationship.data instanceof Array) ? relationship.data[0] : relationship.data;\r\n          if (dataRelationship) {\r\n            const typeName: string = dataRelationship.type;\r\n            // tslint:disable-next-line:max-line-length\r\n            const modelType: ModelType<this> = Reflect.getMetadata('JsonApiDatastoreConfig', this.internalDatastore.constructor).models[typeName];\r\n\r\n            if (modelType) {\r\n              const relationshipModel = this.getBelongsToRelationship(\r\n                modelType,\r\n                dataRelationship,\r\n                included,\r\n                typeName,\r\n                remainingModels\r\n              );\r\n\r\n              if (relationshipModel) {\r\n                this[metadata.propertyName] = relationshipModel;\r\n              }\r\n            } else {\r\n              throw {message: `parseBelongsTo - Model type for relationship ${typeName} not found.`};\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private getHasManyRelationship<T extends JsonApiModel>(\r\n    modelType: ModelType<T>,\r\n    data: any,\r\n    included: any,\r\n    typeName: string,\r\n    remainingModels: Array<any>\r\n  ): Array<T> {\r\n    const relationshipList: Array<T> = [];\r\n\r\n    data.forEach((item: any) => {\r\n      const relationshipData: any = find(included, {id: item.id, type: typeName} as any);\r\n\r\n      if (relationshipData) {\r\n        const newObject: T = this.createOrPeek(modelType, relationshipData);\r\n\r\n        const indexOfNewlyFoundModel = remainingModels.indexOf(relationshipData);\r\n        const modelsForProcessing = remainingModels.concat([]);\r\n\r\n        if (indexOfNewlyFoundModel !== -1) {\r\n          modelsForProcessing.splice(indexOfNewlyFoundModel, 1);\r\n          newObject.syncRelationships(relationshipData, included, modelsForProcessing);\r\n        }\r\n\r\n        relationshipList.push(newObject);\r\n      }\r\n    });\r\n\r\n    return relationshipList;\r\n  }\r\n\r\n  private getBelongsToRelationship<T extends JsonApiModel>(\r\n    modelType: ModelType<T>,\r\n    data: any,\r\n    included: Array<any>,\r\n    typeName: string,\r\n    remainingModels: Array<any>\r\n  ): T | null {\r\n    const id: string = data.id;\r\n\r\n    const relationshipData: any = find(included, {id, type: typeName} as any);\r\n\r\n    if (relationshipData) {\r\n      const newObject: T = this.createOrPeek(modelType, relationshipData);\r\n\r\n      const indexOfNewlyFoundModel = remainingModels.indexOf(relationshipData);\r\n      const modelsForProcessing = remainingModels.concat([]);\r\n\r\n      if (indexOfNewlyFoundModel !== -1) {\r\n        modelsForProcessing.splice(indexOfNewlyFoundModel, 1);\r\n        newObject.syncRelationships(relationshipData, included, modelsForProcessing);\r\n      }\r\n\r\n      return newObject;\r\n    }\r\n\r\n    return this.internalDatastore.peekRecord(modelType, id);\r\n  }\r\n\r\n  private createOrPeek<T extends JsonApiModel>(modelType: ModelType<T>, data: any): T {\r\n    const peek = this.internalDatastore.peekRecord(modelType, data.id);\r\n\r\n    if (peek) {\r\n      _.extend(peek, this.internalDatastore.transformSerializedNamesToPropertyNames(modelType, data.attributes));\r\n      return peek;\r\n    }\r\n\r\n    const newObject: T = this.internalDatastore.deserializeModel(modelType, data);\r\n    this.internalDatastore.addToStore(newObject);\r\n\r\n    return newObject;\r\n  }\r\n}\r\n","export interface JsonApiError {\r\n  id?: string;\r\n  links?: Array<any>;\r\n  status?: string;\r\n  code?: string;\r\n  title?: string;\r\n  detail?: string;\r\n  source?: {\r\n    pointer?: string;\r\n    parameter?: string\r\n  };\r\n  meta?: any;\r\n}\r\n\r\nexport class ErrorResponse {\r\n  errors?: JsonApiError[] = [];\r\n\r\n  constructor(errors ?: JsonApiError[]) {\r\n    if (errors) {\r\n      this.errors = errors;\r\n    }\r\n  }\r\n}\r\n","export class JsonApiQueryData<T> {\r\n  constructor(protected jsonApiModels: Array<T>, protected metaData?: any) {\r\n  }\r\n\r\n  public getModels(): T[] {\r\n    return this.jsonApiModels;\r\n  }\r\n\r\n  public getMeta(): any {\r\n    return this.metaData;\r\n  }\r\n}\r\n","export interface Overrides {\r\n  getDirtyAttributes?: (attributedMetadata: any, model ?: any) => object;\r\n  toQueryString?: (params: any) => string;\r\n}\r\n","export interface JsonModelConverterConfig {\r\n  nullValue?: boolean;\r\n  hasMany?: boolean;\r\n}\r\n","import { Overrides } from './overrides.interface';\r\n\r\nexport interface DatastoreConfig {\r\n  apiVersion?: string;\r\n  baseUrl?: string;\r\n  models?: object;\r\n  overrides?: Overrides;\r\n}\r\n","import { MetaModelType } from '../models/json-api-meta.model';\r\n\r\nexport interface ModelConfig<T = any> {\r\n  type: string;\r\n  apiVersion?: string;\r\n  baseUrl?: string;\r\n  modelEndpointUrl?: string;\r\n  meta?: MetaModelType<T>;\r\n}\r\n","import { PropertyConverter } from './property-converter.interface';\r\n\r\nexport interface AttributeDecoratorOptions {\r\n  serializedName?: string;\r\n  converter?: PropertyConverter;\r\n}\r\n","export interface PropertyConverter {\r\n  mask(value: any): any;\r\n\r\n  unmask(value: any): any;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse, HttpHeaders, HttpResponse } from '@angular/common/http';\r\nimport find from 'lodash-es/find';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { Observable, of, throwError } from 'rxjs';\r\nimport { JsonApiModel } from '../models/json-api.model';\r\nimport { ErrorResponse } from '../models/error-response.model';\r\nimport { JsonApiQueryData } from '../models/json-api-query-data';\r\nimport * as qs from 'qs';\r\nimport { DatastoreConfig } from '../interfaces/datastore-config.interface';\r\nimport { ModelConfig } from '../interfaces/model-config.interface';\r\nimport { AttributeMetadata } from '../constants/symbols';\r\nimport 'reflect-metadata';\r\n\r\nexport type ModelType<T extends JsonApiModel> = new(datastore: JsonApiDatastore, data: any) => T;\r\n\r\n/**\r\n * HACK/FIXME:\r\n * Type 'symbol' cannot be used as an index type.\r\n * TypeScript 2.9.x\r\n * See https://github.com/Microsoft/TypeScript/issues/24587.\r\n */\r\n// tslint:disable-next-line:variable-name\r\nconst AttributeMetadataIndex: string = AttributeMetadata as any;\r\n\r\n@Injectable()\r\nexport class JsonApiDatastore {\r\n\r\n  protected config: DatastoreConfig;\r\n  private globalHeaders: HttpHeaders;\r\n  private globalRequestOptions: object = {};\r\n  private internalStore: { [type: string]: { [id: string]: JsonApiModel } } = {};\r\n  private toQueryString: (params: any) => string = this.datastoreConfig.overrides\r\n  && this.datastoreConfig.overrides.toQueryString ?\r\n    this.datastoreConfig.overrides.toQueryString : this._toQueryString;\r\n\r\n  constructor(protected http: HttpClient) {\r\n  }\r\n\r\n  set headers(headers: HttpHeaders) {\r\n    this.globalHeaders = headers;\r\n  }\r\n\r\n  set requestOptions(requestOptions: object) {\r\n    this.globalRequestOptions = requestOptions;\r\n  }\r\n\r\n  public get datastoreConfig(): DatastoreConfig {\r\n    const configFromDecorator: DatastoreConfig = Reflect.getMetadata('JsonApiDatastoreConfig', this.constructor);\r\n    return Object.assign(configFromDecorator, this.config);\r\n  }\r\n\r\n  private get getDirtyAttributes() {\r\n    if (this.datastoreConfig.overrides\r\n      && this.datastoreConfig.overrides.getDirtyAttributes) {\r\n      return this.datastoreConfig.overrides.getDirtyAttributes;\r\n    }\r\n    return JsonApiDatastore.getDirtyAttributes;\r\n  }\r\n\r\n  private static getDirtyAttributes(attributesMetadata: any): { string: any } {\r\n    const dirtyData: any = {};\r\n\r\n    for (const propertyName in attributesMetadata) {\r\n      if (attributesMetadata.hasOwnProperty(propertyName)) {\r\n        const metadata: any = attributesMetadata[propertyName];\r\n\r\n        if (metadata.hasDirtyAttributes) {\r\n          const attributeName = metadata.serializedName != null ? metadata.serializedName : propertyName;\r\n          dirtyData[attributeName] = metadata.serialisationValue ? metadata.serialisationValue : metadata.newValue;\r\n        }\r\n      }\r\n    }\r\n    return dirtyData;\r\n  }\r\n\r\n  /**\r\n   * @deprecated use findAll method to take all models\r\n   */\r\n  query<T extends JsonApiModel>(\r\n    modelType: ModelType<T>,\r\n    params?: any,\r\n    headers?: HttpHeaders,\r\n    customUrl?: string\r\n  ): Observable<T[]> {\r\n    const requestHeaders: HttpHeaders = this.buildHttpHeaders(headers);\r\n    const url: string = this.buildUrl(modelType, params, undefined, customUrl);\r\n    return this.http.get(url, {headers: requestHeaders})\r\n      .pipe(\r\n        map((res: any) => this.extractQueryData(res, modelType)),\r\n        catchError((res: any) => this.handleError(res))\r\n      );\r\n  }\r\n\r\n  public findAll<T extends JsonApiModel>(\r\n    modelType: ModelType<T>,\r\n    params?: any,\r\n    headers?: HttpHeaders,\r\n    customUrl?: string\r\n  ): Observable<JsonApiQueryData<T>> {\r\n    const url: string = this.buildUrl(modelType, params, undefined, customUrl);\r\n    const requestOptions: object = this.buildRequestOptions({headers, observe: 'response'});\r\n\r\n    return this.http.get(url, requestOptions)\r\n      .pipe(\r\n        map((res: HttpResponse<object>) => this.extractQueryData(res, modelType, true)),\r\n        catchError((res: any) => this.handleError(res))\r\n      );\r\n  }\r\n\r\n  public findRecord<T extends JsonApiModel>(\r\n    modelType: ModelType<T>,\r\n    id: string,\r\n    params?: any,\r\n    headers?: HttpHeaders,\r\n    customUrl?: string\r\n  ): Observable<T> {\r\n    const requestOptions: object = this.buildRequestOptions({headers, observe: 'response'});\r\n    const url: string = this.buildUrl(modelType, params, id, customUrl);\r\n\r\n    return this.http.get(url, requestOptions)\r\n      .pipe(\r\n        map((res: HttpResponse<object>) => this.extractRecordData(res, modelType)),\r\n        catchError((res: any) => this.handleError(res))\r\n      );\r\n  }\r\n\r\n  public createRecord<T extends JsonApiModel>(modelType: ModelType<T>, data?: any): T {\r\n    return new modelType(this, {attributes: data});\r\n  }\r\n\r\n  public saveRecord<T extends JsonApiModel>(\r\n    attributesMetadata: any,\r\n    model: T,\r\n    params?: any,\r\n    headers?: HttpHeaders,\r\n    customUrl?: string\r\n  ): Observable<T> {\r\n    const modelType = model.constructor as ModelType<T>;\r\n    const modelConfig: ModelConfig = model.modelConfig;\r\n    const typeName: string = modelConfig.type;\r\n    const relationships: any = this.getRelationships(model);\r\n    const url: string = this.buildUrl(modelType, params, model.id, customUrl);\r\n\r\n    let httpCall: Observable<HttpResponse<object>>;\r\n    const body: any = {\r\n      data: {\r\n        relationships,\r\n        type: typeName,\r\n        id: model.id,\r\n        attributes: this.getDirtyAttributes(attributesMetadata, model)\r\n      }\r\n    };\r\n\r\n    const requestOptions: object = this.buildRequestOptions({headers, observe: 'response'});\r\n\r\n    if (model.id) {\r\n      httpCall = this.http.patch<object>(url, body, requestOptions) as Observable<HttpResponse<object>>;\r\n    } else {\r\n      httpCall = this.http.post<object>(url, body, requestOptions) as Observable<HttpResponse<object>>;\r\n    }\r\n\r\n    return httpCall\r\n      .pipe(\r\n        map((res) => [200, 201].indexOf(res.status) !== -1 ? this.extractRecordData(res, modelType, model) : model),\r\n        catchError((res) => {\r\n          if (res == null) {\r\n            return of(model);\r\n          }\r\n          return this.handleError(res);\r\n        }),\r\n        map((res) => this.updateRelationships(res, relationships))\r\n      );\r\n  }\r\n\r\n  public deleteRecord<T extends JsonApiModel>(\r\n    modelType: ModelType<T>,\r\n    id: string,\r\n    headers?: HttpHeaders,\r\n    customUrl?: string\r\n  ): Observable<Response> {\r\n    const requestOptions: object = this.buildRequestOptions({headers});\r\n    const url: string = this.buildUrl(modelType, null, id, customUrl);\r\n\r\n    return this.http.delete(url, requestOptions)\r\n      .pipe(\r\n        catchError((res: HttpErrorResponse) => this.handleError(res))\r\n      );\r\n  }\r\n\r\n  public peekRecord<T extends JsonApiModel>(modelType: ModelType<T>, id: string): T | null {\r\n    const type: string = Reflect.getMetadata('JsonApiModelConfig', modelType).type;\r\n    return this.internalStore[type] ? this.internalStore[type][id] as T : null;\r\n  }\r\n\r\n  public peekAll<T extends JsonApiModel>(modelType: ModelType<T>): Array<T> {\r\n    const type = Reflect.getMetadata('JsonApiModelConfig', modelType).type;\r\n    const typeStore = this.internalStore[type];\r\n    return typeStore ? Object.keys(typeStore).map((key) => typeStore[key] as T) : [];\r\n  }\r\n\r\n  public deserializeModel<T extends JsonApiModel>(modelType: ModelType<T>, data: any) {\r\n    data.attributes = this.transformSerializedNamesToPropertyNames(modelType, data.attributes);\r\n    return new modelType(this, data);\r\n  }\r\n\r\n  public addToStore(modelOrModels: JsonApiModel | JsonApiModel[]): void {\r\n    const models = Array.isArray(modelOrModels) ? modelOrModels : [modelOrModels];\r\n    const type: string = models[0].modelConfig.type;\r\n    let typeStore = this.internalStore[type];\r\n\r\n    if (!typeStore) {\r\n      typeStore = this.internalStore[type] = {};\r\n    }\r\n\r\n    for (const model of models) {\r\n      typeStore[model.id] = model;\r\n    }\r\n  }\r\n\r\n  public transformSerializedNamesToPropertyNames<T extends JsonApiModel>(modelType: ModelType<T>, attributes: any) {\r\n    if (!attributes) {\r\n      return {};\r\n    }\r\n\r\n    const serializedNameToPropertyName = this.getModelPropertyNames(modelType.prototype);\r\n    const properties: any = {};\r\n\r\n    Object.keys(serializedNameToPropertyName).forEach((serializedName) => {\r\n      if (attributes[serializedName] !== undefined) {\r\n        properties[serializedNameToPropertyName[serializedName]] = attributes[serializedName];\r\n      }\r\n    });\r\n\r\n    return properties;\r\n  }\r\n\r\n  protected buildUrl<T extends JsonApiModel>(\r\n    modelType: ModelType<T>,\r\n    params?: any,\r\n    id?: string,\r\n    customUrl?: string\r\n  ): string {\r\n    // TODO: use HttpParams instead of appending a string to the url\r\n    const queryParams: string = this.toQueryString(params);\r\n\r\n    if (customUrl) {\r\n      return queryParams ? `${customUrl}?${queryParams}` : customUrl;\r\n    }\r\n\r\n    const modelConfig: ModelConfig = Reflect.getMetadata('JsonApiModelConfig', modelType);\r\n\r\n    const baseUrl = modelConfig.baseUrl || this.datastoreConfig.baseUrl;\r\n    const apiVersion = modelConfig.apiVersion || this.datastoreConfig.apiVersion;\r\n    const modelEndpointUrl: string = modelConfig.modelEndpointUrl || modelConfig.type;\r\n\r\n    const url: string = [baseUrl, apiVersion, modelEndpointUrl, id].filter((x) => x).join('/');\r\n\r\n    return queryParams ? `${url}?${queryParams}` : url;\r\n  }\r\n\r\n  protected getRelationships(data: any): any {\r\n    let relationships: any;\r\n\r\n    const belongsToMetadata: any[] = Reflect.getMetadata('BelongsTo', data) || [];\r\n    const hasManyMetadata: any[] = Reflect.getMetadata('HasMany', data) || [];\r\n\r\n    for (const key in data) {\r\n      if (data.hasOwnProperty(key)) {\r\n        if (data[key] instanceof JsonApiModel) {\r\n          relationships = relationships || {};\r\n\r\n          if (data[key].id) {\r\n            const entity = belongsToMetadata.find((it: any) => it.propertyName === key);\r\n            const relationshipKey = entity.relationship;\r\n            relationships[relationshipKey] = {\r\n              data: this.buildSingleRelationshipData(data[key])\r\n            };\r\n          }\r\n        } else if (data[key] instanceof Array) {\r\n          const entity = hasManyMetadata.find((it: any) => it.propertyName === key);\r\n          if (entity && this.isValidToManyRelation(data[key])) {\r\n            relationships = relationships || {};\r\n\r\n            const relationshipKey = entity.relationship;\r\n            const relationshipData = data[key]\r\n              .filter((model: JsonApiModel) => model.id)\r\n              .map((model: JsonApiModel) => this.buildSingleRelationshipData(model));\r\n\r\n            relationships[relationshipKey] = {\r\n              data: relationshipData\r\n            };\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return relationships;\r\n  }\r\n\r\n  protected isValidToManyRelation(objects: Array<any>): boolean {\r\n    if (!objects.length) {\r\n      return true;\r\n    }\r\n    const isJsonApiModel = objects.every((item) => item instanceof JsonApiModel);\r\n    if (!isJsonApiModel) {\r\n      return false;\r\n    }\r\n    const types = objects.map((item: JsonApiModel) => item.modelConfig.modelEndpointUrl || item.modelConfig.type);\r\n    return types\r\n      .filter((type: string, index: number, self: string[]) => self.indexOf(type) === index)\r\n      .length === 1;\r\n  }\r\n\r\n  protected buildSingleRelationshipData(model: JsonApiModel): any {\r\n    const relationshipType: string = model.modelConfig.type;\r\n    const relationShipData: { type: string, id?: string, attributes?: any } = {type: relationshipType};\r\n\r\n    if (model.id) {\r\n      relationShipData.id = model.id;\r\n    } else {\r\n      const attributesMetadata: any = Reflect.getMetadata('Attribute', model);\r\n      relationShipData.attributes = this.getDirtyAttributes(attributesMetadata, model);\r\n    }\r\n\r\n    return relationShipData;\r\n  }\r\n\r\n  protected extractQueryData<T extends JsonApiModel>(\r\n    response: HttpResponse<object>,\r\n    modelType: ModelType<T>,\r\n    withMeta = false\r\n  ): Array<T> | JsonApiQueryData<T> {\r\n    const body: any = response.body;\r\n    const models: T[] = [];\r\n\r\n    body.data.forEach((data: any) => {\r\n      const model: T = this.deserializeModel(modelType, data);\r\n      this.addToStore(model);\r\n\r\n      if (body.included) {\r\n        model.syncRelationships(data, body.included.concat(data));\r\n        this.addToStore(model);\r\n      }\r\n\r\n      models.push(model);\r\n    });\r\n\r\n    if (withMeta && withMeta === true) {\r\n      return new JsonApiQueryData(models, this.parseMeta(body, modelType));\r\n    }\r\n\r\n    return models;\r\n  }\r\n\r\n  protected extractRecordData<T extends JsonApiModel>(\r\n    res: HttpResponse<object>,\r\n    modelType: ModelType<T>,\r\n    model?: T\r\n  ): T {\r\n    const body: any = res.body;\r\n    // Error in Angular < 5.2.4 (see https://github.com/angular/angular/issues/20744)\r\n    // null is converted to 'null', so this is temporary needed to make testcase possible\r\n    // (and to avoid a decrease of the coverage)\r\n    if (!body || body === 'null') {\r\n      throw new Error('no body in response');\r\n    }\r\n\r\n    if (!body.data) {\r\n      if (res.status === 201 || !model) {\r\n        throw new Error('expected data in response');\r\n      }\r\n      return model;\r\n    }\r\n\r\n    if (model) {\r\n      model.modelInitialization = true;\r\n      model.id = body.data.id;\r\n      Object.assign(model, body.data.attributes);\r\n      model.modelInitialization = false;\r\n    }\r\n\r\n    const deserializedModel = model || this.deserializeModel(modelType, body.data);\r\n    this.addToStore(deserializedModel);\r\n    if (body.included) {\r\n      deserializedModel.syncRelationships(body.data, body.included);\r\n      this.addToStore(deserializedModel);\r\n    }\r\n\r\n    return deserializedModel;\r\n  }\r\n\r\n  protected handleError(error: any): Observable<any> {\r\n    if (\r\n      error instanceof HttpErrorResponse &&\r\n      error.error instanceof Object &&\r\n      error.error.errors &&\r\n      error.error.errors instanceof Array\r\n    ) {\r\n      const errors: ErrorResponse = new ErrorResponse(error.error.errors);\r\n      return throwError(errors);\r\n    }\r\n\r\n    return throwError(error);\r\n  }\r\n\r\n  protected parseMeta(body: any, modelType: ModelType<JsonApiModel>): any {\r\n    const metaModel: any = Reflect.getMetadata('JsonApiModelConfig', modelType).meta;\r\n    return new metaModel(body);\r\n  }\r\n\r\n  /**\r\n   * @deprecated use buildHttpHeaders method to build request headers\r\n   */\r\n  protected getOptions(customHeaders?: HttpHeaders): any {\r\n    return {\r\n      headers: this.buildHttpHeaders(customHeaders),\r\n    };\r\n  }\r\n\r\n  protected buildHttpHeaders(customHeaders?: HttpHeaders): HttpHeaders {\r\n    let requestHeaders: HttpHeaders = new HttpHeaders({\r\n      Accept: 'application/vnd.api+json',\r\n      'Content-Type': 'application/vnd.api+json'\r\n    });\r\n\r\n    if (this.globalHeaders) {\r\n      this.globalHeaders.keys().forEach((key) => {\r\n        if (this.globalHeaders.has(key)) {\r\n          requestHeaders = requestHeaders.set(key, this.globalHeaders.get(key));\r\n        }\r\n      });\r\n    }\r\n\r\n    if (customHeaders) {\r\n      customHeaders.keys().forEach((key) => {\r\n        if (customHeaders.has(key)) {\r\n          requestHeaders = requestHeaders.set(key, customHeaders.get(key));\r\n        }\r\n      });\r\n    }\r\n\r\n    return requestHeaders;\r\n  }\r\n\r\n  protected resetMetadataAttributes<T extends JsonApiModel>(res: T, attributesMetadata: any, modelType: ModelType<T>) {\r\n    for (const propertyName in attributesMetadata) {\r\n      if (attributesMetadata.hasOwnProperty(propertyName)) {\r\n        const metadata: any = attributesMetadata[propertyName];\r\n\r\n        if (metadata.hasDirtyAttributes) {\r\n          metadata.hasDirtyAttributes = false;\r\n        }\r\n      }\r\n    }\r\n\r\n    // @ts-ignore\r\n    res[AttributeMetadataIndex] = attributesMetadata;\r\n    return res;\r\n  }\r\n\r\n  protected updateRelationships<T extends JsonApiModel>(model: T, relationships: any): T {\r\n    const modelsTypes: any = Reflect.getMetadata('JsonApiDatastoreConfig', this.constructor).models;\r\n\r\n    for (const relationship in relationships) {\r\n      if (relationships.hasOwnProperty(relationship) && model.hasOwnProperty(relationship)) {\r\n        const relationshipModel: JsonApiModel = model[relationship];\r\n        const hasMany: any[] = Reflect.getMetadata('HasMany', relationshipModel);\r\n        const propertyHasMany: any = find(hasMany, (property) => {\r\n          return modelsTypes[property.relationship] === model.constructor;\r\n        });\r\n\r\n        if (propertyHasMany) {\r\n          relationshipModel[propertyHasMany.propertyName] = relationshipModel[propertyHasMany.propertyName] || [];\r\n\r\n          const indexOfModel = relationshipModel[propertyHasMany.propertyName].indexOf(model);\r\n\r\n          if (indexOfModel === -1) {\r\n            relationshipModel[propertyHasMany.propertyName].push(model);\r\n          } else {\r\n            relationshipModel[propertyHasMany.propertyName][indexOfModel] = model;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return model;\r\n  }\r\n\r\n  protected getModelPropertyNames(model: JsonApiModel) {\r\n    return Reflect.getMetadata('AttributeMapping', model) || [];\r\n  }\r\n\r\n  private buildRequestOptions(customOptions: any = {}): object {\r\n    const httpHeaders: HttpHeaders = this.buildHttpHeaders(customOptions.headers);\r\n\r\n    const requestOptions: object = Object.assign(customOptions, {\r\n      headers: httpHeaders\r\n    });\r\n\r\n    return Object.assign(this.globalRequestOptions, requestOptions);\r\n  }\r\n\r\n  private _toQueryString(params: any): string {\r\n    return qs.stringify(params, {arrayFormat: 'brackets'});\r\n  }\r\n}\r\n","import { JsonApiDatastore } from './services/json-api-datastore.service';\r\n\r\nexport * from './services/json-api-datastore.service';\r\n\r\nexport const PROVIDERS: any[] = [\r\n  JsonApiDatastore\r\n];\r\n","import { NgModule } from '@angular/core';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { PROVIDERS } from './providers';\r\n\r\n@NgModule({\r\n  providers: [PROVIDERS],\r\n  exports: [HttpClientModule]\r\n})\r\nexport class JsonApiModule {\r\n}\r\n"],"names":["_.isEqual","_.cloneDeep","_.extend","AttributeMetadataIndex","qs.stringify"],"mappings":"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"}