{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://angular2-jsonapi/models/json-nested.model.ts","ng://angular2-jsonapi/converters/json-model/json-model.converter.ts","ng://angular2-jsonapi/constants/symbols.ts","ng://angular2-jsonapi/converters/date/date.converter.ts","ng://angular2-jsonapi/models/json-api-meta.model.ts","ng://angular2-jsonapi/models/json-api.model.ts","ng://angular2-jsonapi/models/error-response.model.ts","ng://angular2-jsonapi/models/json-api-query-data.ts","ng://angular2-jsonapi/services/json-api-datastore.service.ts","ng://angular2-jsonapi/providers.ts","ng://angular2-jsonapi/module.ts","ng://angular2-jsonapi/decorators/attribute.decorator.ts","ng://angular2-jsonapi/decorators/belongs-to.decorator.ts","ng://angular2-jsonapi/decorators/has-many.decorator.ts","ng://angular2-jsonapi/decorators/json-api-datastore-config.decorator.ts","ng://angular2-jsonapi/decorators/json-api-model-config.decorator.ts","ng://angular2-jsonapi/decorators/json-attribute.decorator.ts","ng://angular2-jsonapi/decorators/nested-attribute.decorator.ts"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__values","o","m","Symbol","iterator","next","value","done","__read","r","e","ar","push","error","JsonApiNestedModel","data","nestedDataSerialization","defineProperty","Reflect","getMetadata","constructor","fill","serialize","transformSerializedNamesToPropertyNames","_this","serializedNameToPropertyName","getModelPropertyNames","properties","keys","forEach","serializedName","undefined","DEFAULT_OPTIONS","nullValue","hasMany","JsonModelConverter","model","options","modelType","mask","result","Array","isArray","Error","value_1","tslib_1.__values","value_1_1","item","temp","unmask","value_2","value_2_1","AttributeMetadata","DateConverter","parseISO","toISOString","JsonApiMetaModel","response","links","meta","AttributeMetadataIndex","JsonApiModel","internalDatastore","modelInitialization","id","attributes","isModelInitialization","syncRelationships","included","remainingModels","lastSyncModels","modelsForProcessing","concat","parseHasMany","parseBelongsTo","save","params","headers","customUrl","checkChanges","attributesMetadata","saveRecord","hasDirtyAttributes","propertyName","nested","_.isEqual","oldValue","newValue","serialisationValue","converter","_.cloneDeep","rollbackAttributes","hasMany_1","hasMany_1_1","metadata","relationship","relationships","allModels","modelTypesFetched","_c","e_2","_d","typeIndex","typeName","type","includes","models","message","relationshipModels","getHasManyRelationship","belongsTo","belongsTo_1","belongsTo_1_1","dataRelationship","relationshipModel","getBelongsToRelationship","relationshipList","relationshipData","find","newObject","createOrPeek","indexOfNewlyFoundModel","indexOf","splice","peekRecord","peek","_.extend","deserializeModel","addToStore","ErrorResponse","errors","JsonApiQueryData","jsonApiModels","metaData","getModels","getMeta","JsonApiDatastore","http","globalRequestOptions","internalStore","toQueryString","datastoreConfig","overrides","_toQueryString","globalHeaders","requestOptions","configFromDecorator","config","getDirtyAttributes","dirtyData","query","requestHeaders","buildHttpHeaders","url","buildUrl","get","pipe","map","res","extractQueryData","catchError","handleError","findAll","buildRequestOptions","observe","findRecord","extractRecordData","createRecord","modelConfig","getRelationships","body","patch","post","status","of","updateRelationships","deleteRecord","delete","peekAll","typeStore","key","modelOrModels","models_1","models_1_1","queryParams","baseUrl","apiVersion","modelEndpointUrl","filter","x","join","belongsToMetadata","hasManyMetadata","relationshipKey","entity","it","this_1","buildSingleRelationshipData","isValidToManyRelation","anEntity","objects","every","index","self","relationShipData","withMeta","resourceObjects","__spread","parseMeta","deserializedModel","HttpErrorResponse","throwError","metaModel","getOptions","customHeaders","HttpHeaders","Accept","Content-Type","has","set","resetMetadataAttributes","modelsTypes","propertyHasMany","property","indexOfModel","customOptions","httpHeaders","qs.stringify","arrayFormat","Injectable","HttpClient","PROVIDERS","JsonApiModule","NgModule","args","providers","exports","HttpClientModule","target","dataType","forSerialisation","attrConverter","Date","datatype","marked","defineMetadata","mappingMetadata","saveAnnotations","newVal","targetType","convertedValue","instance","setMetadata","enumerable","configurable","annotations","updateMetadata"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { ModelConfig } from '../interfaces/model-config.interface';\r\nimport { JsonApiModel } from './json-api.model';\r\n\r\nexport class JsonApiNestedModel {\r\n  [key: string]: any;\r\n\r\n  public nestedDataSerialization = false;\r\n\r\n  constructor(data?: any) {\r\n    if (data) {\r\n      Object.assign(this, data);\r\n    }\r\n  }\r\n\r\n  get modelConfig(): ModelConfig {\r\n    return Reflect.getMetadata('JsonApiModelConfig', this.constructor);\r\n  }\r\n\r\n  public fill(data: any) {\r\n    Object.assign(this, data);\r\n  }\r\n\r\n  public serialize(): any {\r\n    return this.transformSerializedNamesToPropertyNames();\r\n  }\r\n\r\n  protected transformSerializedNamesToPropertyNames<T extends JsonApiModel>() {\r\n    const serializedNameToPropertyName = this.getModelPropertyNames();\r\n    const properties: any = {};\r\n    Object.keys(serializedNameToPropertyName).forEach((serializedName) => {\r\n      if (this && this[serializedName] !== null &&\r\n        this[serializedName] !== undefined && serializedName !== 'nestedDataSerialization') {\r\n        properties[serializedNameToPropertyName[serializedName]] = this[serializedName];\r\n      }\r\n    });\r\n\r\n    return properties;\r\n  }\r\n\r\n  protected getModelPropertyNames() {\r\n    return Reflect.getMetadata('AttributeMapping', this) || [];\r\n  }\r\n}\r\n","import { JsonModelConverterConfig } from '../../interfaces/json-model-converter-config.interface';\r\nimport { PropertyConverter } from '../../interfaces/property-converter.interface';\r\nimport { JsonApiNestedModel } from '../../models/json-nested.model';\r\n\r\nexport const DEFAULT_OPTIONS: JsonModelConverterConfig = {\r\n  nullValue: false,\r\n  hasMany: false\r\n};\r\n\r\nexport class JsonModelConverter<T> implements PropertyConverter {\r\n  private modelType: any; // ModelType<T>\r\n  private options: JsonModelConverterConfig;\r\n\r\n  constructor(model: T, options: JsonModelConverterConfig = {}) {\r\n    this.modelType = model; // <ModelType<T>>model\r\n    this.options = {...DEFAULT_OPTIONS, ...options};\r\n  }\r\n\r\n  mask(value: any): T | Array<T> {\r\n    if (!value && !this.options.nullValue) {\r\n      if (this.options.hasMany) {\r\n        return [];\r\n      }\r\n      return new this.modelType();\r\n    }\r\n\r\n    let result = null;\r\n    if (this.options.hasMany) {\r\n      if (!Array.isArray(value)) {\r\n        throw new Error(`ERROR: JsonModelConverter: Expected array but got ${typeof value}.`);\r\n      }\r\n      result = [];\r\n      for (const item of value) {\r\n        if (item === null) {\r\n          continue;\r\n        }\r\n        let temp;\r\n        if (typeof item === 'object') {\r\n          temp = new this.modelType();\r\n          temp.fill(item);\r\n        } else {\r\n          temp = item;\r\n        }\r\n\r\n        result.push(temp);\r\n      }\r\n    } else {\r\n      if (!(value instanceof this.modelType)) {\r\n        result = new this.modelType();\r\n        result.fill(value);\r\n      } else {\r\n        result = value;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  unmask(value: any): any {\r\n    if (!value) {\r\n      return value;\r\n    }\r\n    let result = null;\r\n    if (Array.isArray(value)) {\r\n      result = [];\r\n      for (const item of value) {\r\n        if (!item) {\r\n          continue;\r\n        }\r\n        if (item instanceof JsonApiNestedModel) {\r\n          item.nestedDataSerialization = true;\r\n          result.push(item.serialize());\r\n          item.nestedDataSerialization = false;\r\n        } else {\r\n          result.push(item);\r\n        }\r\n      }\r\n    } else {\r\n      if (value instanceof JsonApiNestedModel) {\r\n        value.nestedDataSerialization = true;\r\n        result = value.serialize();\r\n        value.nestedDataSerialization = false;\r\n      } else {\r\n        result = value;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n}\r\n","// tslint:disable-next-line:variable-name\r\nexport const AttributeMetadata = Symbol('AttributeMetadata') as any;\r\n","import { parseISO } from 'date-fns';\r\nimport { PropertyConverter } from '../../interfaces/property-converter.interface';\r\n\r\nexport class DateConverter implements PropertyConverter {\r\n  mask(value: any) {\r\n    if (typeof value === 'string') {\r\n      return parseISO(value);\r\n    } else {\r\n      return value;\r\n    }\r\n  }\r\n\r\n  unmask(value: any) {\r\n    if (value === null) {\r\n      return null;\r\n    }\r\n    return value.toISOString();\r\n  }\r\n}\r\n","export type MetaModelType<T> = new(response: any) => T;\r\n\r\nexport class JsonApiMetaModel {\r\n  public links: Array<any>;\r\n  public meta: any;\r\n\r\n  constructor(response: any) {\r\n    this.links = response.links || [];\r\n    this.meta = response.meta;\r\n  }\r\n}\r\n","import { find, includes } from 'lodash-es';\r\nimport { Observable } from 'rxjs';\r\nimport { JsonApiDatastore, ModelType } from '../services/json-api-datastore.service';\r\nimport { ModelConfig } from '../interfaces/model-config.interface';\r\nimport * as _ from 'lodash';\r\nimport { AttributeMetadata } from '../constants/symbols';\r\nimport { HttpHeaders } from '@angular/common/http';\r\n\r\n/**\r\n * HACK/FIXME:\r\n * Type 'symbol' cannot be used as an index type.\r\n * TypeScript 2.9.x\r\n * See https://github.com/Microsoft/TypeScript/issues/24587.\r\n */\r\n// tslint:disable-next-line:variable-name\r\nconst AttributeMetadataIndex: string = AttributeMetadata as any;\r\n\r\nexport class JsonApiModel {\r\n  id: string;\r\n  public modelInitialization = false;\r\n\r\n  [key: string]: any;\r\n\r\n  lastSyncModels: Array<any>;\r\n\r\n  constructor(private internalDatastore: JsonApiDatastore, data?: any) {\r\n    if (data) {\r\n      this.modelInitialization = true;\r\n      this.id = data.id;\r\n      Object.assign(this, data.attributes);\r\n      this.modelInitialization = false;\r\n    }\r\n  }\r\n\r\n  public isModelInitialization(): boolean {\r\n    return this.modelInitialization;\r\n  }\r\n\r\n  public syncRelationships(data: any, included: any, remainingModels?: Array<any>): void {\r\n    if (this.lastSyncModels === included) {\r\n      return;\r\n    }\r\n\r\n    if (data) {\r\n      let modelsForProcessing = remainingModels;\r\n\r\n      if (modelsForProcessing === undefined) {\r\n        modelsForProcessing = [].concat(included);\r\n      }\r\n\r\n      this.parseHasMany(data, included, modelsForProcessing);\r\n      this.parseBelongsTo(data, included, modelsForProcessing);\r\n    }\r\n\r\n    this.lastSyncModels = included;\r\n  }\r\n\r\n  public save(params?: any, headers?: HttpHeaders, customUrl?: string): Observable<this> {\r\n    this.checkChanges();\r\n    const attributesMetadata: any = this[AttributeMetadataIndex];\r\n    return this.internalDatastore.saveRecord(attributesMetadata, this, params, headers, customUrl);\r\n  }\r\n\r\n  get hasDirtyAttributes() {\r\n    this.checkChanges();\r\n    const attributesMetadata: any = this[AttributeMetadataIndex];\r\n    let hasDirtyAttributes = false;\r\n    for (const propertyName in attributesMetadata) {\r\n      if (attributesMetadata.hasOwnProperty(propertyName)) {\r\n        const metadata: any = attributesMetadata[propertyName];\r\n        if (metadata.hasDirtyAttributes) {\r\n          hasDirtyAttributes = true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return hasDirtyAttributes;\r\n  }\r\n\r\n  private checkChanges() {\r\n    const attributesMetadata: any = this[AttributeMetadata];\r\n    for (const propertyName in attributesMetadata) {\r\n      if (attributesMetadata.hasOwnProperty(propertyName)) {\r\n        const metadata: any = attributesMetadata[propertyName];\r\n        if (metadata.nested) {\r\n          this[AttributeMetadata][propertyName].hasDirtyAttributes = !_.isEqual(\r\n            attributesMetadata[propertyName].oldValue,\r\n            attributesMetadata[propertyName].newValue\r\n          );\r\n          this[AttributeMetadata][propertyName].serialisationValue = attributesMetadata[propertyName].converter(\r\n            Reflect.getMetadata('design:type', this, propertyName),\r\n            _.cloneDeep(attributesMetadata[propertyName].newValue),\r\n            true\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public rollbackAttributes(): void {\r\n    const attributesMetadata: any = this[AttributeMetadataIndex];\r\n    for (const propertyName in attributesMetadata) {\r\n      if (attributesMetadata.hasOwnProperty(propertyName)) {\r\n        if (attributesMetadata[propertyName].hasDirtyAttributes) {\r\n          this[propertyName] = _.cloneDeep(attributesMetadata[propertyName].oldValue);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  get modelConfig(): ModelConfig {\r\n    return Reflect.getMetadata('JsonApiModelConfig', this.constructor);\r\n  }\r\n\r\n  private parseHasMany(data: any, included: any, remainingModels: Array<any>): void {\r\n    const hasMany: any = Reflect.getMetadata('HasMany', this);\r\n\r\n    if (hasMany) {\r\n      for (const metadata of hasMany) {\r\n        const relationship: any = data.relationships ? data.relationships[metadata.relationship] : null;\r\n\r\n        if (relationship && relationship.data && Array.isArray(relationship.data)) {\r\n          let allModels: JsonApiModel[] = [];\r\n          const modelTypesFetched: any = [];\r\n\r\n          for (const typeIndex of Object.keys(relationship.data)) {\r\n            const typeName: string = relationship.data[typeIndex].type;\r\n\r\n            if (!includes(modelTypesFetched, typeName)) {\r\n              modelTypesFetched.push(typeName);\r\n              // tslint:disable-next-line:max-line-length\r\n              const modelType: ModelType<this> = Reflect.getMetadata('JsonApiDatastoreConfig', this.internalDatastore.constructor).models[typeName];\r\n\r\n              if (modelType) {\r\n                const relationshipModels: JsonApiModel[] = this.getHasManyRelationship(\r\n                  modelType,\r\n                  relationship.data,\r\n                  included,\r\n                  typeName,\r\n                  remainingModels\r\n                );\r\n\r\n                if (relationshipModels.length > 0) {\r\n                  allModels = allModels.concat(relationshipModels);\r\n                }\r\n              } else {\r\n                throw {message: `parseHasMany - Model type for relationship ${typeName} not found.`};\r\n              }\r\n            }\r\n          }\r\n\r\n          this[metadata.propertyName] = allModels;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private parseBelongsTo(data: any, included: Array<any>, remainingModels: Array<any>): void {\r\n    const belongsTo: any = Reflect.getMetadata('BelongsTo', this);\r\n\r\n    if (belongsTo) {\r\n      for (const metadata of belongsTo) {\r\n        const relationship: any = data.relationships ? data.relationships[metadata.relationship] : null;\r\n        if (relationship && relationship.data) {\r\n          const dataRelationship: any = (relationship.data instanceof Array) ? relationship.data[0] : relationship.data;\r\n          if (dataRelationship) {\r\n            const typeName: string = dataRelationship.type;\r\n            // tslint:disable-next-line:max-line-length\r\n            const modelType: ModelType<this> = Reflect.getMetadata('JsonApiDatastoreConfig', this.internalDatastore.constructor).models[typeName];\r\n\r\n            if (modelType) {\r\n              const relationshipModel = this.getBelongsToRelationship(\r\n                modelType,\r\n                dataRelationship,\r\n                included,\r\n                typeName,\r\n                remainingModels\r\n              );\r\n\r\n              if (relationshipModel) {\r\n                this[metadata.propertyName] = relationshipModel;\r\n              }\r\n            } else {\r\n              throw {message: `parseBelongsTo - Model type for relationship ${typeName} not found.`};\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private getHasManyRelationship<T extends JsonApiModel>(\r\n    modelType: ModelType<T>,\r\n    data: any,\r\n    included: any,\r\n    typeName: string,\r\n    remainingModels: Array<any>\r\n  ): Array<T> {\r\n    const relationshipList: Array<T> = [];\r\n\r\n    data.forEach((item: any) => {\r\n      const relationshipData: any = find(included, {id: item.id, type: typeName} as any);\r\n\r\n      if (relationshipData) {\r\n        const newObject: T = this.createOrPeek(modelType, relationshipData);\r\n\r\n        const indexOfNewlyFoundModel = remainingModels.indexOf(relationshipData);\r\n        const modelsForProcessing = remainingModels.concat([]);\r\n\r\n        if (indexOfNewlyFoundModel !== -1) {\r\n          modelsForProcessing.splice(indexOfNewlyFoundModel, 1);\r\n          newObject.syncRelationships(relationshipData, included, modelsForProcessing);\r\n        }\r\n\r\n        relationshipList.push(newObject);\r\n      }\r\n    });\r\n\r\n    return relationshipList;\r\n  }\r\n\r\n  private getBelongsToRelationship<T extends JsonApiModel>(\r\n    modelType: ModelType<T>,\r\n    data: any,\r\n    included: Array<any>,\r\n    typeName: string,\r\n    remainingModels: Array<any>\r\n  ): T | null {\r\n    const id: string = data.id;\r\n\r\n    const relationshipData: any = find(included, {id, type: typeName} as any);\r\n\r\n    if (relationshipData) {\r\n      const newObject: T = this.createOrPeek(modelType, relationshipData);\r\n\r\n      const indexOfNewlyFoundModel = remainingModels.indexOf(relationshipData);\r\n      const modelsForProcessing = remainingModels.concat([]);\r\n\r\n      if (indexOfNewlyFoundModel !== -1) {\r\n        modelsForProcessing.splice(indexOfNewlyFoundModel, 1);\r\n        newObject.syncRelationships(relationshipData, included, modelsForProcessing);\r\n      }\r\n\r\n      return newObject;\r\n    }\r\n\r\n    return this.internalDatastore.peekRecord(modelType, id);\r\n  }\r\n\r\n  private createOrPeek<T extends JsonApiModel>(modelType: ModelType<T>, data: any): T {\r\n    const peek = this.internalDatastore.peekRecord(modelType, data.id);\r\n\r\n    if (peek) {\r\n      _.extend(peek, this.internalDatastore.transformSerializedNamesToPropertyNames(modelType, data.attributes));\r\n      return peek;\r\n    }\r\n\r\n    const newObject: T = this.internalDatastore.deserializeModel(modelType, data);\r\n    this.internalDatastore.addToStore(newObject);\r\n\r\n    return newObject;\r\n  }\r\n}\r\n","export interface JsonApiError {\r\n  id?: string;\r\n  links?: Array<any>;\r\n  status?: string;\r\n  code?: string;\r\n  title?: string;\r\n  detail?: string;\r\n  source?: {\r\n    pointer?: string;\r\n    parameter?: string\r\n  };\r\n  meta?: any;\r\n}\r\n\r\nexport class ErrorResponse {\r\n  errors?: JsonApiError[] = [];\r\n\r\n  constructor(errors ?: JsonApiError[]) {\r\n    if (errors) {\r\n      this.errors = errors;\r\n    }\r\n  }\r\n}\r\n","export class JsonApiQueryData<T> {\r\n  constructor(protected jsonApiModels: Array<T>, protected metaData?: any) {\r\n  }\r\n\r\n  public getModels(): T[] {\r\n    return this.jsonApiModels;\r\n  }\r\n\r\n  public getMeta(): any {\r\n    return this.metaData;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse, HttpHeaders, HttpResponse } from '@angular/common/http';\r\nimport { find } from 'lodash-es';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { Observable, of, throwError } from 'rxjs';\r\nimport { JsonApiModel } from '../models/json-api.model';\r\nimport { ErrorResponse } from '../models/error-response.model';\r\nimport { JsonApiQueryData } from '../models/json-api-query-data';\r\nimport * as qs from 'qs';\r\nimport { DatastoreConfig } from '../interfaces/datastore-config.interface';\r\nimport { ModelConfig } from '../interfaces/model-config.interface';\r\nimport { AttributeMetadata } from '../constants/symbols';\r\nimport 'reflect-metadata';\r\n\r\nexport type ModelType<T extends JsonApiModel> = new(datastore: JsonApiDatastore, data: any) => T;\r\n\r\n/**\r\n * HACK/FIXME:\r\n * Type 'symbol' cannot be used as an index type.\r\n * TypeScript 2.9.x\r\n * See https://github.com/Microsoft/TypeScript/issues/24587.\r\n */\r\n// tslint:disable-next-line:variable-name\r\nconst AttributeMetadataIndex: string = AttributeMetadata as any;\r\n\r\n@Injectable()\r\nexport class JsonApiDatastore {\r\n\r\n  protected config: DatastoreConfig;\r\n  private globalHeaders: HttpHeaders;\r\n  private globalRequestOptions: object = {};\r\n  private internalStore: { [type: string]: { [id: string]: JsonApiModel } } = {};\r\n  private toQueryString: (params: any) => string = this.datastoreConfig.overrides\r\n  && this.datastoreConfig.overrides.toQueryString ?\r\n    this.datastoreConfig.overrides.toQueryString : this._toQueryString;\r\n\r\n  constructor(protected http: HttpClient) {\r\n  }\r\n\r\n  set headers(headers: HttpHeaders) {\r\n    this.globalHeaders = headers;\r\n  }\r\n\r\n  set requestOptions(requestOptions: object) {\r\n    this.globalRequestOptions = requestOptions;\r\n  }\r\n\r\n  public get datastoreConfig(): DatastoreConfig {\r\n    const configFromDecorator: DatastoreConfig = Reflect.getMetadata('JsonApiDatastoreConfig', this.constructor);\r\n    return Object.assign(configFromDecorator, this.config);\r\n  }\r\n\r\n  private get getDirtyAttributes() {\r\n    if (this.datastoreConfig.overrides\r\n      && this.datastoreConfig.overrides.getDirtyAttributes) {\r\n      return this.datastoreConfig.overrides.getDirtyAttributes;\r\n    }\r\n    return JsonApiDatastore.getDirtyAttributes;\r\n  }\r\n\r\n  private static getDirtyAttributes(attributesMetadata: any): { string: any } {\r\n    const dirtyData: any = {};\r\n\r\n    for (const propertyName in attributesMetadata) {\r\n      if (attributesMetadata.hasOwnProperty(propertyName)) {\r\n        const metadata: any = attributesMetadata[propertyName];\r\n\r\n        if (metadata.hasDirtyAttributes) {\r\n          const attributeName = metadata.serializedName != null ? metadata.serializedName : propertyName;\r\n          dirtyData[attributeName] = metadata.serialisationValue ? metadata.serialisationValue : metadata.newValue;\r\n        }\r\n      }\r\n    }\r\n    return dirtyData;\r\n  }\r\n\r\n  /**\r\n   * @deprecated use findAll method to take all models\r\n   */\r\n  query<T extends JsonApiModel>(\r\n    modelType: ModelType<T>,\r\n    params?: any,\r\n    headers?: HttpHeaders,\r\n    customUrl?: string\r\n  ): Observable<T[]> {\r\n    const requestHeaders: HttpHeaders = this.buildHttpHeaders(headers);\r\n    const url: string = this.buildUrl(modelType, params, undefined, customUrl);\r\n    return this.http.get(url, {headers: requestHeaders})\r\n      .pipe(\r\n        map((res: any) => this.extractQueryData(res, modelType)),\r\n        catchError((res: any) => this.handleError(res))\r\n      );\r\n  }\r\n\r\n  public findAll<T extends JsonApiModel>(\r\n    modelType: ModelType<T>,\r\n    params?: any,\r\n    headers?: HttpHeaders,\r\n    customUrl?: string\r\n  ): Observable<JsonApiQueryData<T>> {\r\n    const url: string = this.buildUrl(modelType, params, undefined, customUrl);\r\n    const requestOptions: object = this.buildRequestOptions({headers, observe: 'response'});\r\n\r\n    return this.http.get(url, requestOptions)\r\n      .pipe(\r\n        map((res: HttpResponse<object>) => this.extractQueryData(res, modelType, true)),\r\n        catchError((res: any) => this.handleError(res))\r\n      );\r\n  }\r\n\r\n  public findRecord<T extends JsonApiModel>(\r\n    modelType: ModelType<T>,\r\n    id: string,\r\n    params?: any,\r\n    headers?: HttpHeaders,\r\n    customUrl?: string\r\n  ): Observable<T> {\r\n    const requestOptions: object = this.buildRequestOptions({headers, observe: 'response'});\r\n    const url: string = this.buildUrl(modelType, params, id, customUrl);\r\n\r\n    return this.http.get(url, requestOptions)\r\n      .pipe(\r\n        map((res: HttpResponse<object>) => this.extractRecordData(res, modelType)),\r\n        catchError((res: any) => this.handleError(res))\r\n      );\r\n  }\r\n\r\n  public createRecord<T extends JsonApiModel>(modelType: ModelType<T>, data?: any): T {\r\n    return new modelType(this, {attributes: data});\r\n  }\r\n\r\n  public saveRecord<T extends JsonApiModel>(\r\n    attributesMetadata: any,\r\n    model: T,\r\n    params?: any,\r\n    headers?: HttpHeaders,\r\n    customUrl?: string\r\n  ): Observable<T> {\r\n    const modelType = model.constructor as ModelType<T>;\r\n    const modelConfig: ModelConfig = model.modelConfig;\r\n    const typeName: string = modelConfig.type;\r\n    const relationships: any = this.getRelationships(model);\r\n    const url: string = this.buildUrl(modelType, params, model.id, customUrl);\r\n\r\n    let httpCall: Observable<HttpResponse<object>>;\r\n    const body: any = {\r\n      data: {\r\n        relationships,\r\n        type: typeName,\r\n        id: model.id,\r\n        attributes: this.getDirtyAttributes(attributesMetadata, model)\r\n      }\r\n    };\r\n\r\n    const requestOptions: object = this.buildRequestOptions({headers, observe: 'response'});\r\n\r\n    if (model.id) {\r\n      httpCall = this.http.patch<object>(url, body, requestOptions) as Observable<HttpResponse<object>>;\r\n    } else {\r\n      httpCall = this.http.post<object>(url, body, requestOptions) as Observable<HttpResponse<object>>;\r\n    }\r\n\r\n    return httpCall\r\n      .pipe(\r\n        map((res) => [200, 201].indexOf(res.status) !== -1 ? this.extractRecordData(res, modelType, model) : model),\r\n        catchError((res) => {\r\n          if (res == null) {\r\n            return of(model);\r\n          }\r\n          return this.handleError(res);\r\n        }),\r\n        map((res) => this.updateRelationships(res, relationships))\r\n      );\r\n  }\r\n\r\n  public deleteRecord<T extends JsonApiModel>(\r\n    modelType: ModelType<T>,\r\n    id: string,\r\n    headers?: HttpHeaders,\r\n    customUrl?: string\r\n  ): Observable<Response> {\r\n    const requestOptions: object = this.buildRequestOptions({headers});\r\n    const url: string = this.buildUrl(modelType, null, id, customUrl);\r\n\r\n    return this.http.delete(url, requestOptions)\r\n      .pipe(\r\n        catchError((res: HttpErrorResponse) => this.handleError(res))\r\n      );\r\n  }\r\n\r\n  public peekRecord<T extends JsonApiModel>(modelType: ModelType<T>, id: string): T | null {\r\n    const type: string = Reflect.getMetadata('JsonApiModelConfig', modelType).type;\r\n    return this.internalStore[type] ? this.internalStore[type][id] as T : null;\r\n  }\r\n\r\n  public peekAll<T extends JsonApiModel>(modelType: ModelType<T>): Array<T> {\r\n    const type = Reflect.getMetadata('JsonApiModelConfig', modelType).type;\r\n    const typeStore = this.internalStore[type];\r\n    return typeStore ? Object.keys(typeStore).map((key) => typeStore[key] as T) : [];\r\n  }\r\n\r\n  public deserializeModel<T extends JsonApiModel>(modelType: ModelType<T>, data: any) {\r\n    data.attributes = this.transformSerializedNamesToPropertyNames(modelType, data.attributes);\r\n    return new modelType(this, data);\r\n  }\r\n\r\n  public addToStore(modelOrModels: JsonApiModel | JsonApiModel[]): void {\r\n    const models = Array.isArray(modelOrModels) ? modelOrModels : [modelOrModels];\r\n    const type: string = models[0].modelConfig.type;\r\n    let typeStore = this.internalStore[type];\r\n\r\n    if (!typeStore) {\r\n      typeStore = this.internalStore[type] = {};\r\n    }\r\n\r\n    for (const model of models) {\r\n      typeStore[model.id] = model;\r\n    }\r\n  }\r\n\r\n  public transformSerializedNamesToPropertyNames<T extends JsonApiModel>(modelType: ModelType<T>, attributes: any) {\r\n    if (!attributes) {\r\n      return {};\r\n    }\r\n\r\n    const serializedNameToPropertyName = this.getModelPropertyNames(modelType.prototype);\r\n    const properties: any = {};\r\n\r\n    Object.keys(serializedNameToPropertyName).forEach((serializedName) => {\r\n      if (attributes[serializedName] !== undefined) {\r\n        properties[serializedNameToPropertyName[serializedName]] = attributes[serializedName];\r\n      }\r\n    });\r\n\r\n    return properties;\r\n  }\r\n\r\n  protected buildUrl<T extends JsonApiModel>(\r\n    modelType: ModelType<T>,\r\n    params?: any,\r\n    id?: string,\r\n    customUrl?: string\r\n  ): string {\r\n    // TODO: use HttpParams instead of appending a string to the url\r\n    const queryParams: string = this.toQueryString(params);\r\n\r\n    if (customUrl) {\r\n      return queryParams ? `${customUrl}?${queryParams}` : customUrl;\r\n    }\r\n\r\n    const modelConfig: ModelConfig = Reflect.getMetadata('JsonApiModelConfig', modelType);\r\n\r\n    const baseUrl = modelConfig.baseUrl || this.datastoreConfig.baseUrl;\r\n    const apiVersion = modelConfig.apiVersion || this.datastoreConfig.apiVersion;\r\n    const modelEndpointUrl: string = modelConfig.modelEndpointUrl || modelConfig.type;\r\n\r\n    const url: string = [baseUrl, apiVersion, modelEndpointUrl, id].filter((x) => x).join('/');\r\n\r\n    return queryParams ? `${url}?${queryParams}` : url;\r\n  }\r\n\r\n  protected getRelationships(data: any): any {\r\n    let relationships: any;\r\n\r\n    const belongsToMetadata: any[] = Reflect.getMetadata('BelongsTo', data) || [];\r\n    const hasManyMetadata: any[] = Reflect.getMetadata('HasMany', data) || [];\r\n\r\n    for (const key in data) {\r\n      if (data.hasOwnProperty(key)) {\r\n        if (data[key] instanceof JsonApiModel) {\r\n          relationships = relationships || {};\r\n\r\n          if (data[key].id) {\r\n            const entity = belongsToMetadata.find((it: any) => it.propertyName === key);\r\n            const relationshipKey = entity.relationship;\r\n            relationships[relationshipKey] = {\r\n              data: this.buildSingleRelationshipData(data[key])\r\n            };\r\n          }\r\n        } else if (data[key] instanceof Array) {\r\n          const entity = hasManyMetadata.find((it: any) => it.propertyName === key);\r\n          if (entity && this.isValidToManyRelation(data[key])) {\r\n            relationships = relationships || {};\r\n\r\n            const relationshipKey = entity.relationship;\r\n            const relationshipData = data[key]\r\n              .filter((model: JsonApiModel) => model.id)\r\n              .map((model: JsonApiModel) => this.buildSingleRelationshipData(model));\r\n\r\n            relationships[relationshipKey] = {\r\n              data: relationshipData\r\n            };\r\n          }\r\n        }  else if (data[key] === null) {\r\n          const entity = belongsToMetadata.find((anEntity: any) => anEntity.propertyName === key);\r\n\r\n          if (entity) {\r\n            relationships = relationships || {};\r\n\r\n            relationships[entity.relationship] = {\r\n              data: null\r\n            };\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return relationships;\r\n  }\r\n\r\n  protected isValidToManyRelation(objects: Array<any>): boolean {\r\n    if (!objects.length) {\r\n      return true;\r\n    }\r\n    const isJsonApiModel = objects.every((item) => item instanceof JsonApiModel);\r\n    if (!isJsonApiModel) {\r\n      return false;\r\n    }\r\n    const types = objects.map((item: JsonApiModel) => item.modelConfig.modelEndpointUrl || item.modelConfig.type);\r\n    return types\r\n      .filter((type: string, index: number, self: string[]) => self.indexOf(type) === index)\r\n      .length === 1;\r\n  }\r\n\r\n  protected buildSingleRelationshipData(model: JsonApiModel): any {\r\n    const relationshipType: string = model.modelConfig.type;\r\n    const relationShipData: { type: string, id?: string, attributes?: any } = {type: relationshipType};\r\n\r\n    if (model.id) {\r\n      relationShipData.id = model.id;\r\n    } else {\r\n      const attributesMetadata: any = Reflect.getMetadata('Attribute', model);\r\n      relationShipData.attributes = this.getDirtyAttributes(attributesMetadata, model);\r\n    }\r\n\r\n    return relationShipData;\r\n  }\r\n\r\n  protected extractQueryData<T extends JsonApiModel>(\r\n    response: HttpResponse<object>,\r\n    modelType: ModelType<T>,\r\n    withMeta = false\r\n  ): Array<T> | JsonApiQueryData<T> {\r\n    const body: any = response.body;\r\n    const models: T[] = [];\r\n\r\n    const resourceObjects = [...body.data, ...(body.included || [])];\r\n\r\n    body.data.forEach((data: any) => {\r\n      const model: T = this.deserializeModel(modelType, data);\r\n      this.addToStore(model);\r\n\r\n      model.syncRelationships(data, resourceObjects);\r\n      this.addToStore(model);\r\n\r\n      models.push(model);\r\n    });\r\n\r\n    if (withMeta && withMeta === true) {\r\n      return new JsonApiQueryData(models, this.parseMeta(body, modelType));\r\n    }\r\n\r\n    return models;\r\n  }\r\n\r\n  protected extractRecordData<T extends JsonApiModel>(\r\n    res: HttpResponse<object>,\r\n    modelType: ModelType<T>,\r\n    model?: T\r\n  ): T {\r\n    const body: any = res.body;\r\n    // Error in Angular < 5.2.4 (see https://github.com/angular/angular/issues/20744)\r\n    // null is converted to 'null', so this is temporary needed to make testcase possible\r\n    // (and to avoid a decrease of the coverage)\r\n    if (!body || body === 'null') {\r\n      throw new Error('no body in response');\r\n    }\r\n\r\n    if (!body.data) {\r\n      if (res.status === 201 || !model) {\r\n        throw new Error('expected data in response');\r\n      }\r\n      return model;\r\n    }\r\n\r\n    if (model) {\r\n      model.modelInitialization = true;\r\n      model.id = body.data.id;\r\n      Object.assign(model, body.data.attributes);\r\n      model.modelInitialization = false;\r\n    }\r\n\r\n    const deserializedModel = model || this.deserializeModel(modelType, body.data);\r\n    this.addToStore(deserializedModel);\r\n    if (body.included) {\r\n      deserializedModel.syncRelationships(body.data, body.included);\r\n      this.addToStore(deserializedModel);\r\n    }\r\n\r\n    return deserializedModel;\r\n  }\r\n\r\n  protected handleError(error: any): Observable<any> {\r\n    if (\r\n      error instanceof HttpErrorResponse &&\r\n      error.error instanceof Object &&\r\n      error.error.errors &&\r\n      error.error.errors instanceof Array\r\n    ) {\r\n      const errors: ErrorResponse = new ErrorResponse(error.error.errors);\r\n      return throwError(errors);\r\n    }\r\n\r\n    return throwError(error);\r\n  }\r\n\r\n  protected parseMeta(body: any, modelType: ModelType<JsonApiModel>): any {\r\n    const metaModel: any = Reflect.getMetadata('JsonApiModelConfig', modelType).meta;\r\n    return new metaModel(body);\r\n  }\r\n\r\n  /**\r\n   * @deprecated use buildHttpHeaders method to build request headers\r\n   */\r\n  protected getOptions(customHeaders?: HttpHeaders): any {\r\n    return {\r\n      headers: this.buildHttpHeaders(customHeaders),\r\n    };\r\n  }\r\n\r\n  protected buildHttpHeaders(customHeaders?: HttpHeaders): HttpHeaders {\r\n    let requestHeaders: HttpHeaders = new HttpHeaders({\r\n      Accept: 'application/vnd.api+json',\r\n      'Content-Type': 'application/vnd.api+json'\r\n    });\r\n\r\n    if (this.globalHeaders) {\r\n      this.globalHeaders.keys().forEach((key) => {\r\n        if (this.globalHeaders.has(key)) {\r\n          requestHeaders = requestHeaders.set(key, this.globalHeaders.get(key));\r\n        }\r\n      });\r\n    }\r\n\r\n    if (customHeaders) {\r\n      customHeaders.keys().forEach((key) => {\r\n        if (customHeaders.has(key)) {\r\n          requestHeaders = requestHeaders.set(key, customHeaders.get(key));\r\n        }\r\n      });\r\n    }\r\n\r\n    return requestHeaders;\r\n  }\r\n\r\n  protected resetMetadataAttributes<T extends JsonApiModel>(res: T, attributesMetadata: any, modelType: ModelType<T>) {\r\n    for (const propertyName in attributesMetadata) {\r\n      if (attributesMetadata.hasOwnProperty(propertyName)) {\r\n        const metadata: any = attributesMetadata[propertyName];\r\n\r\n        if (metadata.hasDirtyAttributes) {\r\n          metadata.hasDirtyAttributes = false;\r\n        }\r\n      }\r\n    }\r\n\r\n    // @ts-ignore\r\n    res[AttributeMetadataIndex] = attributesMetadata;\r\n    return res;\r\n  }\r\n\r\n  protected updateRelationships<T extends JsonApiModel>(model: T, relationships: any): T {\r\n    const modelsTypes: any = Reflect.getMetadata('JsonApiDatastoreConfig', this.constructor).models;\r\n\r\n    for (const relationship in relationships) {\r\n      if (relationships.hasOwnProperty(relationship) && model.hasOwnProperty(relationship) && model[relationship]) {\r\n        const relationshipModel: JsonApiModel = model[relationship];\r\n        const hasMany: any[] = Reflect.getMetadata('HasMany', relationshipModel);\r\n        const propertyHasMany: any = find(hasMany, (property) => {\r\n          return modelsTypes[property.relationship] === model.constructor;\r\n        });\r\n\r\n        if (propertyHasMany) {\r\n          relationshipModel[propertyHasMany.propertyName] = relationshipModel[propertyHasMany.propertyName] || [];\r\n\r\n          const indexOfModel = relationshipModel[propertyHasMany.propertyName].indexOf(model);\r\n\r\n          if (indexOfModel === -1) {\r\n            relationshipModel[propertyHasMany.propertyName].push(model);\r\n          } else {\r\n            relationshipModel[propertyHasMany.propertyName][indexOfModel] = model;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return model;\r\n  }\r\n\r\n  protected getModelPropertyNames(model: JsonApiModel) {\r\n    return Reflect.getMetadata('AttributeMapping', model) || [];\r\n  }\r\n\r\n  private buildRequestOptions(customOptions: any = {}): object {\r\n    const httpHeaders: HttpHeaders = this.buildHttpHeaders(customOptions.headers);\r\n\r\n    const requestOptions: object = Object.assign(customOptions, {\r\n      headers: httpHeaders\r\n    });\r\n\r\n    return Object.assign(this.globalRequestOptions, requestOptions);\r\n  }\r\n\r\n  private _toQueryString(params: any): string {\r\n    return qs.stringify(params, {arrayFormat: 'brackets'});\r\n  }\r\n}\r\n","import { JsonApiDatastore } from './services/json-api-datastore.service';\r\n\r\nexport * from './services/json-api-datastore.service';\r\n\r\nexport const PROVIDERS: any[] = [\r\n  JsonApiDatastore\r\n];\r\n","import { NgModule } from '@angular/core';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { PROVIDERS } from './providers';\r\n\r\n@NgModule({\r\n  providers: [PROVIDERS],\r\n  exports: [HttpClientModule]\r\n})\r\nexport class JsonApiModule {\r\n}\r\n","import { AttributeMetadata } from '../constants/symbols';\r\nimport { AttributeDecoratorOptions } from '../interfaces/attribute-decorator-options.interface';\r\nimport { DateConverter } from '../converters/date/date.converter';\r\nimport * as _ from 'lodash';\r\n\r\nexport function Attribute(options: AttributeDecoratorOptions = {}): PropertyDecorator {\r\n  return (target: any, propertyName: string) => {\r\n    const converter = (dataType: any, value: any, forSerialisation = false): any => {\r\n      let attrConverter;\r\n\r\n      if (options.converter) {\r\n        attrConverter = options.converter;\r\n      } else if (dataType === Date) {\r\n        attrConverter = new DateConverter();\r\n      } else {\r\n        const datatype = new dataType();\r\n\r\n        if (datatype.mask && datatype.unmask) {\r\n          attrConverter = datatype;\r\n        }\r\n      }\r\n\r\n      if (attrConverter) {\r\n        if (!forSerialisation) {\r\n          return attrConverter.mask(value);\r\n        }\r\n        return attrConverter.unmask(value);\r\n      }\r\n\r\n      return value;\r\n    };\r\n\r\n    const saveAnnotations = () => {\r\n      const metadata = Reflect.getMetadata('Attribute', target) || {};\r\n\r\n      metadata[propertyName] = {\r\n        marked: true\r\n      };\r\n\r\n      Reflect.defineMetadata('Attribute', metadata, target);\r\n\r\n      const mappingMetadata = Reflect.getMetadata('AttributeMapping', target) || {};\r\n      const serializedPropertyName = options.serializedName !== undefined ? options.serializedName : propertyName;\r\n      mappingMetadata[serializedPropertyName] = propertyName;\r\n      Reflect.defineMetadata('AttributeMapping', mappingMetadata, target);\r\n    };\r\n\r\n    const setMetadata = (\r\n      instance: any,\r\n      oldValue: any,\r\n      newValue: any\r\n    ) => {\r\n      const targetType = Reflect.getMetadata('design:type', target, propertyName);\r\n\r\n      if (!instance[AttributeMetadata]) {\r\n        instance[AttributeMetadata] = {};\r\n      }\r\n      instance[AttributeMetadata][propertyName] = {\r\n        newValue,\r\n        oldValue,\r\n        nested: false,\r\n        serializedName: options.serializedName,\r\n        hasDirtyAttributes: !_.isEqual(oldValue, newValue),\r\n        serialisationValue: converter(targetType, newValue, true)\r\n      };\r\n    };\r\n\r\n    const getter = function() {\r\n      return this[`_${propertyName}`];\r\n    };\r\n\r\n    const setter = function(newVal: any) {\r\n      const targetType = Reflect.getMetadata('design:type', target, propertyName);\r\n      const convertedValue = converter(targetType, newVal);\r\n      let oldValue = null;\r\n      if (this.isModelInitialization() && this.id) {\r\n        oldValue = converter(targetType, newVal);\r\n      } else {\r\n        if (this[AttributeMetadata] && this[AttributeMetadata][propertyName]) {\r\n          oldValue = this[AttributeMetadata][propertyName].oldValue;\r\n        }\r\n      }\r\n\r\n      this[`_${propertyName}`] = convertedValue;\r\n      setMetadata(this, oldValue, convertedValue);\r\n    };\r\n\r\n    if (delete target[propertyName]) {\r\n      saveAnnotations();\r\n      Object.defineProperty(target, propertyName, {\r\n        get: getter,\r\n        set: setter,\r\n        enumerable: true,\r\n        configurable: true\r\n      });\r\n    }\r\n  };\r\n}\r\n","export function BelongsTo(config: any = {}) {\r\n  return (target: any, propertyName: string | symbol) => {\r\n    const annotations = Reflect.getMetadata('BelongsTo', target) || [];\r\n\r\n    annotations.push({\r\n      propertyName,\r\n      relationship: config.key || propertyName\r\n    });\r\n\r\n    Reflect.defineMetadata('BelongsTo', annotations, target);\r\n  };\r\n}\r\n","export function HasMany(config: any = {}) {\r\n  return (target: any, propertyName: string | symbol) => {\r\n    const annotations = Reflect.getMetadata('HasMany', target) || [];\r\n\r\n    annotations.push({\r\n      propertyName,\r\n      relationship: config.key || propertyName\r\n    });\r\n\r\n    Reflect.defineMetadata('HasMany', annotations, target);\r\n  };\r\n}\r\n","export function JsonApiDatastoreConfig(config: any = {}) {\r\n  return (target: any) => {\r\n    Reflect.defineMetadata('JsonApiDatastoreConfig', config, target);\r\n  };\r\n}\r\n","import { JsonApiMetaModel } from '../models/json-api-meta.model';\r\nimport { ModelConfig } from '../interfaces/model-config.interface';\r\n\r\nexport function JsonApiModelConfig(config: ModelConfig) {\r\n  return (target: any) => {\r\n    if (typeof config.meta === 'undefined' || config.meta == null) {\r\n      config.meta = JsonApiMetaModel;\r\n    }\r\n\r\n    Reflect.defineMetadata('JsonApiModelConfig', config, target);\r\n  };\r\n}\r\n","import { AttributeDecoratorOptions } from '../interfaces/attribute-decorator-options.interface';\r\nimport { DateConverter } from '../converters/date/date.converter';\r\n\r\nexport function JsonAttribute(options: AttributeDecoratorOptions = {}): PropertyDecorator {\r\n  return (target: any, propertyName: string) => {\r\n    const converter = (dataType: any, value: any, forSerialisation = false): any => {\r\n      let attrConverter;\r\n\r\n      if (options.converter) {\r\n        attrConverter = options.converter;\r\n      } else if (dataType === Date) {\r\n        attrConverter = new DateConverter();\r\n      } else {\r\n        const datatype = new dataType();\r\n\r\n        if (datatype.mask && datatype.unmask) {\r\n          attrConverter = datatype;\r\n        }\r\n      }\r\n\r\n      if (attrConverter) {\r\n        if (!forSerialisation) {\r\n          return attrConverter.mask(value);\r\n        }\r\n        return attrConverter.unmask(value);\r\n      }\r\n\r\n      return value;\r\n    };\r\n\r\n    const saveAnnotations = () => {\r\n      const metadata = Reflect.getMetadata('JsonAttribute', target) || {};\r\n\r\n      metadata[propertyName] = {\r\n        marked: true\r\n      };\r\n\r\n      Reflect.defineMetadata('JsonAttribute', metadata, target);\r\n\r\n      const mappingMetadata = Reflect.getMetadata('AttributeMapping', target) || {};\r\n      const serializedPropertyName = options.serializedName !== undefined ? options.serializedName : propertyName;\r\n      mappingMetadata[serializedPropertyName] = propertyName;\r\n      Reflect.defineMetadata('AttributeMapping', mappingMetadata, target);\r\n    };\r\n\r\n    const getter = function() {\r\n      if (this.nestedDataSerialization) {\r\n        return converter(Reflect.getMetadata('design:type', target, propertyName), this[`_${propertyName}`], true);\r\n      }\r\n      return this[`_${propertyName}`];\r\n    };\r\n\r\n    const setter = function(newVal: any) {\r\n      const targetType = Reflect.getMetadata('design:type', target, propertyName);\r\n      this[`_${propertyName}`] = converter(targetType, newVal);\r\n    };\r\n\r\n    if (delete target[propertyName]) {\r\n      saveAnnotations();\r\n      Object.defineProperty(target, propertyName, {\r\n        get: getter,\r\n        set: setter,\r\n        enumerable: true,\r\n        configurable: true\r\n      });\r\n    }\r\n  };\r\n}\r\n","import { AttributeMetadata } from '../constants/symbols';\r\nimport { AttributeDecoratorOptions } from '../interfaces/attribute-decorator-options.interface';\r\nimport * as _ from 'lodash';\r\n\r\nexport function NestedAttribute(options: AttributeDecoratorOptions = {}): PropertyDecorator {\r\n  return (target: any, propertyName: string) => {\r\n    const converter = (dataType: any, value: any, forSerialisation = false): any => {\r\n      let attrConverter;\r\n\r\n      if (options.converter) {\r\n        attrConverter = options.converter;\r\n      } else {\r\n        const datatype = new dataType();\r\n\r\n        if (datatype.mask && datatype.unmask) {\r\n          attrConverter = datatype;\r\n        }\r\n      }\r\n\r\n      if (attrConverter) {\r\n        if (!forSerialisation) {\r\n          return attrConverter.mask(value);\r\n        }\r\n        return attrConverter.unmask(value);\r\n      }\r\n\r\n      return value;\r\n    };\r\n\r\n    const saveAnnotations = () => {\r\n      const metadata = Reflect.getMetadata('NestedAttribute', target) || {};\r\n\r\n      metadata[propertyName] = {\r\n        marked: true\r\n      };\r\n\r\n      Reflect.defineMetadata('NestedAttribute', metadata, target);\r\n\r\n      const mappingMetadata = Reflect.getMetadata('AttributeMapping', target) || {};\r\n      const serializedPropertyName = options.serializedName !== undefined ? options.serializedName : propertyName;\r\n      mappingMetadata[serializedPropertyName] = propertyName;\r\n      Reflect.defineMetadata('AttributeMapping', mappingMetadata, target);\r\n    };\r\n\r\n    const updateMetadata = (instance: any) => {\r\n      const newValue = instance[`_${propertyName}`];\r\n\r\n      if (!instance[AttributeMetadata]) {\r\n        instance[AttributeMetadata] = {};\r\n      }\r\n      if (instance[AttributeMetadata][propertyName] && !instance.isModelInitialization()) {\r\n        instance[AttributeMetadata][propertyName].newValue = newValue;\r\n        instance[AttributeMetadata][propertyName].hasDirtyAttributes = !_.isEqual(\r\n          instance[AttributeMetadata][propertyName].oldValue,\r\n          newValue\r\n        );\r\n        instance[AttributeMetadata][propertyName].serialisationValue = newValue;\r\n      } else {\r\n        const oldValue = _.cloneDeep(newValue);\r\n        instance[AttributeMetadata][propertyName] = {\r\n          newValue,\r\n          oldValue,\r\n          converter,\r\n          nested: true,\r\n          hasDirtyAttributes: !_.isEqual(newValue, oldValue)\r\n        };\r\n      }\r\n    };\r\n\r\n    const getter = function() {\r\n      return this[`_${propertyName}`];\r\n    };\r\n\r\n    const setter = function(newVal: any) {\r\n      const targetType = Reflect.getMetadata('design:type', target, propertyName);\r\n      this[`_${propertyName}`] = converter(targetType, newVal);\r\n      updateMetadata(this);\r\n    };\r\n\r\n    if (delete target[propertyName]) {\r\n      saveAnnotations();\r\n      Object.defineProperty(target, propertyName, {\r\n        get: getter,\r\n        set: setter,\r\n        enumerable: true,\r\n        configurable: true\r\n      });\r\n\r\n    }\r\n  };\r\n}\r\n"]}